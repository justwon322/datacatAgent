// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"datacatAgent/ent/predicate"
	"datacatAgent/ent/script"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ScriptUpdate is the builder for updating Script entities.
type ScriptUpdate struct {
	config
	hooks    []Hook
	mutation *ScriptMutation
}

// Where appends a list predicates to the ScriptUpdate builder.
func (su *ScriptUpdate) Where(ps ...predicate.Script) *ScriptUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetProgram sets the "program" field.
func (su *ScriptUpdate) SetProgram(s string) *ScriptUpdate {
	su.mutation.SetProgram(s)
	return su
}

// SetNillableProgram sets the "program" field if the given value is not nil.
func (su *ScriptUpdate) SetNillableProgram(s *string) *ScriptUpdate {
	if s != nil {
		su.SetProgram(*s)
	}
	return su
}

// SetUpdatedAt sets the "updatedAt" field.
func (su *ScriptUpdate) SetUpdatedAt(t time.Time) *ScriptUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// SetJobId sets the "jobId" field.
func (su *ScriptUpdate) SetJobId(i int) *ScriptUpdate {
	su.mutation.ResetJobId()
	su.mutation.SetJobId(i)
	return su
}

// SetNillableJobId sets the "jobId" field if the given value is not nil.
func (su *ScriptUpdate) SetNillableJobId(i *int) *ScriptUpdate {
	if i != nil {
		su.SetJobId(*i)
	}
	return su
}

// AddJobId adds i to the "jobId" field.
func (su *ScriptUpdate) AddJobId(i int) *ScriptUpdate {
	su.mutation.AddJobId(i)
	return su
}

// SetHostname sets the "hostname" field.
func (su *ScriptUpdate) SetHostname(s string) *ScriptUpdate {
	su.mutation.SetHostname(s)
	return su
}

// SetNillableHostname sets the "hostname" field if the given value is not nil.
func (su *ScriptUpdate) SetNillableHostname(s *string) *ScriptUpdate {
	if s != nil {
		su.SetHostname(*s)
	}
	return su
}

// SetCommand sets the "command" field.
func (su *ScriptUpdate) SetCommand(s string) *ScriptUpdate {
	su.mutation.SetCommand(s)
	return su
}

// SetNillableCommand sets the "command" field if the given value is not nil.
func (su *ScriptUpdate) SetNillableCommand(s *string) *ScriptUpdate {
	if s != nil {
		su.SetCommand(*s)
	}
	return su
}

// SetComment sets the "comment" field.
func (su *ScriptUpdate) SetComment(s string) *ScriptUpdate {
	su.mutation.SetComment(s)
	return su
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (su *ScriptUpdate) SetNillableComment(s *string) *ScriptUpdate {
	if s != nil {
		su.SetComment(*s)
	}
	return su
}

// SetUsable sets the "usable" field.
func (su *ScriptUpdate) SetUsable(i int) *ScriptUpdate {
	su.mutation.ResetUsable()
	su.mutation.SetUsable(i)
	return su
}

// SetNillableUsable sets the "usable" field if the given value is not nil.
func (su *ScriptUpdate) SetNillableUsable(i *int) *ScriptUpdate {
	if i != nil {
		su.SetUsable(*i)
	}
	return su
}

// AddUsable adds i to the "usable" field.
func (su *ScriptUpdate) AddUsable(i int) *ScriptUpdate {
	su.mutation.AddUsable(i)
	return su
}

// SetRepeatInterval sets the "repeatInterval" field.
func (su *ScriptUpdate) SetRepeatInterval(i int) *ScriptUpdate {
	su.mutation.ResetRepeatInterval()
	su.mutation.SetRepeatInterval(i)
	return su
}

// SetNillableRepeatInterval sets the "repeatInterval" field if the given value is not nil.
func (su *ScriptUpdate) SetNillableRepeatInterval(i *int) *ScriptUpdate {
	if i != nil {
		su.SetRepeatInterval(*i)
	}
	return su
}

// AddRepeatInterval adds i to the "repeatInterval" field.
func (su *ScriptUpdate) AddRepeatInterval(i int) *ScriptUpdate {
	su.mutation.AddRepeatInterval(i)
	return su
}

// SetUpdatedById sets the "updatedById" field.
func (su *ScriptUpdate) SetUpdatedById(i int) *ScriptUpdate {
	su.mutation.ResetUpdatedById()
	su.mutation.SetUpdatedById(i)
	return su
}

// SetNillableUpdatedById sets the "updatedById" field if the given value is not nil.
func (su *ScriptUpdate) SetNillableUpdatedById(i *int) *ScriptUpdate {
	if i != nil {
		su.SetUpdatedById(*i)
	}
	return su
}

// AddUpdatedById adds i to the "updatedById" field.
func (su *ScriptUpdate) AddUpdatedById(i int) *ScriptUpdate {
	su.mutation.AddUpdatedById(i)
	return su
}

// SetCreatedById sets the "createdById" field.
func (su *ScriptUpdate) SetCreatedById(i int) *ScriptUpdate {
	su.mutation.ResetCreatedById()
	su.mutation.SetCreatedById(i)
	return su
}

// SetNillableCreatedById sets the "createdById" field if the given value is not nil.
func (su *ScriptUpdate) SetNillableCreatedById(i *int) *ScriptUpdate {
	if i != nil {
		su.SetCreatedById(*i)
	}
	return su
}

// AddCreatedById adds i to the "createdById" field.
func (su *ScriptUpdate) AddCreatedById(i int) *ScriptUpdate {
	su.mutation.AddCreatedById(i)
	return su
}

// SetRegionId sets the "regionId" field.
func (su *ScriptUpdate) SetRegionId(i int) *ScriptUpdate {
	su.mutation.ResetRegionId()
	su.mutation.SetRegionId(i)
	return su
}

// SetNillableRegionId sets the "regionId" field if the given value is not nil.
func (su *ScriptUpdate) SetNillableRegionId(i *int) *ScriptUpdate {
	if i != nil {
		su.SetRegionId(*i)
	}
	return su
}

// AddRegionId adds i to the "regionId" field.
func (su *ScriptUpdate) AddRegionId(i int) *ScriptUpdate {
	su.mutation.AddRegionId(i)
	return su
}

// SetManagerId sets the "managerId" field.
func (su *ScriptUpdate) SetManagerId(i int) *ScriptUpdate {
	su.mutation.ResetManagerId()
	su.mutation.SetManagerId(i)
	return su
}

// SetNillableManagerId sets the "managerId" field if the given value is not nil.
func (su *ScriptUpdate) SetNillableManagerId(i *int) *ScriptUpdate {
	if i != nil {
		su.SetManagerId(*i)
	}
	return su
}

// AddManagerId adds i to the "managerId" field.
func (su *ScriptUpdate) AddManagerId(i int) *ScriptUpdate {
	su.mutation.AddManagerId(i)
	return su
}

// SetManagerGroupId sets the "managerGroupId" field.
func (su *ScriptUpdate) SetManagerGroupId(i int) *ScriptUpdate {
	su.mutation.ResetManagerGroupId()
	su.mutation.SetManagerGroupId(i)
	return su
}

// SetNillableManagerGroupId sets the "managerGroupId" field if the given value is not nil.
func (su *ScriptUpdate) SetNillableManagerGroupId(i *int) *ScriptUpdate {
	if i != nil {
		su.SetManagerGroupId(*i)
	}
	return su
}

// AddManagerGroupId adds i to the "managerGroupId" field.
func (su *ScriptUpdate) AddManagerGroupId(i int) *ScriptUpdate {
	su.mutation.AddManagerGroupId(i)
	return su
}

// SetStartTime sets the "startTime" field.
func (su *ScriptUpdate) SetStartTime(t time.Time) *ScriptUpdate {
	su.mutation.SetStartTime(t)
	return su
}

// SetNillableStartTime sets the "startTime" field if the given value is not nil.
func (su *ScriptUpdate) SetNillableStartTime(t *time.Time) *ScriptUpdate {
	if t != nil {
		su.SetStartTime(*t)
	}
	return su
}

// SetEndTime sets the "endTime" field.
func (su *ScriptUpdate) SetEndTime(t time.Time) *ScriptUpdate {
	su.mutation.SetEndTime(t)
	return su
}

// SetNillableEndTime sets the "endTime" field if the given value is not nil.
func (su *ScriptUpdate) SetNillableEndTime(t *time.Time) *ScriptUpdate {
	if t != nil {
		su.SetEndTime(*t)
	}
	return su
}

// Mutation returns the ScriptMutation object of the builder.
func (su *ScriptUpdate) Mutation() *ScriptMutation {
	return su.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *ScriptUpdate) Save(ctx context.Context) (int, error) {
	su.defaults()
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *ScriptUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *ScriptUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *ScriptUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *ScriptUpdate) defaults() {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		v := script.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
}

func (su *ScriptUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(script.Table, script.Columns, sqlgraph.NewFieldSpec(script.FieldID, field.TypeInt64))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Program(); ok {
		_spec.SetField(script.FieldProgram, field.TypeString, value)
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(script.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := su.mutation.JobId(); ok {
		_spec.SetField(script.FieldJobId, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedJobId(); ok {
		_spec.AddField(script.FieldJobId, field.TypeInt, value)
	}
	if value, ok := su.mutation.Hostname(); ok {
		_spec.SetField(script.FieldHostname, field.TypeString, value)
	}
	if value, ok := su.mutation.Command(); ok {
		_spec.SetField(script.FieldCommand, field.TypeString, value)
	}
	if value, ok := su.mutation.Comment(); ok {
		_spec.SetField(script.FieldComment, field.TypeString, value)
	}
	if value, ok := su.mutation.Usable(); ok {
		_spec.SetField(script.FieldUsable, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedUsable(); ok {
		_spec.AddField(script.FieldUsable, field.TypeInt, value)
	}
	if value, ok := su.mutation.RepeatInterval(); ok {
		_spec.SetField(script.FieldRepeatInterval, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedRepeatInterval(); ok {
		_spec.AddField(script.FieldRepeatInterval, field.TypeInt, value)
	}
	if value, ok := su.mutation.UpdatedById(); ok {
		_spec.SetField(script.FieldUpdatedById, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedUpdatedById(); ok {
		_spec.AddField(script.FieldUpdatedById, field.TypeInt, value)
	}
	if value, ok := su.mutation.CreatedById(); ok {
		_spec.SetField(script.FieldCreatedById, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedCreatedById(); ok {
		_spec.AddField(script.FieldCreatedById, field.TypeInt, value)
	}
	if value, ok := su.mutation.RegionId(); ok {
		_spec.SetField(script.FieldRegionId, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedRegionId(); ok {
		_spec.AddField(script.FieldRegionId, field.TypeInt, value)
	}
	if value, ok := su.mutation.ManagerId(); ok {
		_spec.SetField(script.FieldManagerId, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedManagerId(); ok {
		_spec.AddField(script.FieldManagerId, field.TypeInt, value)
	}
	if value, ok := su.mutation.ManagerGroupId(); ok {
		_spec.SetField(script.FieldManagerGroupId, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedManagerGroupId(); ok {
		_spec.AddField(script.FieldManagerGroupId, field.TypeInt, value)
	}
	if value, ok := su.mutation.StartTime(); ok {
		_spec.SetField(script.FieldStartTime, field.TypeTime, value)
	}
	if value, ok := su.mutation.EndTime(); ok {
		_spec.SetField(script.FieldEndTime, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{script.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// ScriptUpdateOne is the builder for updating a single Script entity.
type ScriptUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ScriptMutation
}

// SetProgram sets the "program" field.
func (suo *ScriptUpdateOne) SetProgram(s string) *ScriptUpdateOne {
	suo.mutation.SetProgram(s)
	return suo
}

// SetNillableProgram sets the "program" field if the given value is not nil.
func (suo *ScriptUpdateOne) SetNillableProgram(s *string) *ScriptUpdateOne {
	if s != nil {
		suo.SetProgram(*s)
	}
	return suo
}

// SetUpdatedAt sets the "updatedAt" field.
func (suo *ScriptUpdateOne) SetUpdatedAt(t time.Time) *ScriptUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// SetJobId sets the "jobId" field.
func (suo *ScriptUpdateOne) SetJobId(i int) *ScriptUpdateOne {
	suo.mutation.ResetJobId()
	suo.mutation.SetJobId(i)
	return suo
}

// SetNillableJobId sets the "jobId" field if the given value is not nil.
func (suo *ScriptUpdateOne) SetNillableJobId(i *int) *ScriptUpdateOne {
	if i != nil {
		suo.SetJobId(*i)
	}
	return suo
}

// AddJobId adds i to the "jobId" field.
func (suo *ScriptUpdateOne) AddJobId(i int) *ScriptUpdateOne {
	suo.mutation.AddJobId(i)
	return suo
}

// SetHostname sets the "hostname" field.
func (suo *ScriptUpdateOne) SetHostname(s string) *ScriptUpdateOne {
	suo.mutation.SetHostname(s)
	return suo
}

// SetNillableHostname sets the "hostname" field if the given value is not nil.
func (suo *ScriptUpdateOne) SetNillableHostname(s *string) *ScriptUpdateOne {
	if s != nil {
		suo.SetHostname(*s)
	}
	return suo
}

// SetCommand sets the "command" field.
func (suo *ScriptUpdateOne) SetCommand(s string) *ScriptUpdateOne {
	suo.mutation.SetCommand(s)
	return suo
}

// SetNillableCommand sets the "command" field if the given value is not nil.
func (suo *ScriptUpdateOne) SetNillableCommand(s *string) *ScriptUpdateOne {
	if s != nil {
		suo.SetCommand(*s)
	}
	return suo
}

// SetComment sets the "comment" field.
func (suo *ScriptUpdateOne) SetComment(s string) *ScriptUpdateOne {
	suo.mutation.SetComment(s)
	return suo
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (suo *ScriptUpdateOne) SetNillableComment(s *string) *ScriptUpdateOne {
	if s != nil {
		suo.SetComment(*s)
	}
	return suo
}

// SetUsable sets the "usable" field.
func (suo *ScriptUpdateOne) SetUsable(i int) *ScriptUpdateOne {
	suo.mutation.ResetUsable()
	suo.mutation.SetUsable(i)
	return suo
}

// SetNillableUsable sets the "usable" field if the given value is not nil.
func (suo *ScriptUpdateOne) SetNillableUsable(i *int) *ScriptUpdateOne {
	if i != nil {
		suo.SetUsable(*i)
	}
	return suo
}

// AddUsable adds i to the "usable" field.
func (suo *ScriptUpdateOne) AddUsable(i int) *ScriptUpdateOne {
	suo.mutation.AddUsable(i)
	return suo
}

// SetRepeatInterval sets the "repeatInterval" field.
func (suo *ScriptUpdateOne) SetRepeatInterval(i int) *ScriptUpdateOne {
	suo.mutation.ResetRepeatInterval()
	suo.mutation.SetRepeatInterval(i)
	return suo
}

// SetNillableRepeatInterval sets the "repeatInterval" field if the given value is not nil.
func (suo *ScriptUpdateOne) SetNillableRepeatInterval(i *int) *ScriptUpdateOne {
	if i != nil {
		suo.SetRepeatInterval(*i)
	}
	return suo
}

// AddRepeatInterval adds i to the "repeatInterval" field.
func (suo *ScriptUpdateOne) AddRepeatInterval(i int) *ScriptUpdateOne {
	suo.mutation.AddRepeatInterval(i)
	return suo
}

// SetUpdatedById sets the "updatedById" field.
func (suo *ScriptUpdateOne) SetUpdatedById(i int) *ScriptUpdateOne {
	suo.mutation.ResetUpdatedById()
	suo.mutation.SetUpdatedById(i)
	return suo
}

// SetNillableUpdatedById sets the "updatedById" field if the given value is not nil.
func (suo *ScriptUpdateOne) SetNillableUpdatedById(i *int) *ScriptUpdateOne {
	if i != nil {
		suo.SetUpdatedById(*i)
	}
	return suo
}

// AddUpdatedById adds i to the "updatedById" field.
func (suo *ScriptUpdateOne) AddUpdatedById(i int) *ScriptUpdateOne {
	suo.mutation.AddUpdatedById(i)
	return suo
}

// SetCreatedById sets the "createdById" field.
func (suo *ScriptUpdateOne) SetCreatedById(i int) *ScriptUpdateOne {
	suo.mutation.ResetCreatedById()
	suo.mutation.SetCreatedById(i)
	return suo
}

// SetNillableCreatedById sets the "createdById" field if the given value is not nil.
func (suo *ScriptUpdateOne) SetNillableCreatedById(i *int) *ScriptUpdateOne {
	if i != nil {
		suo.SetCreatedById(*i)
	}
	return suo
}

// AddCreatedById adds i to the "createdById" field.
func (suo *ScriptUpdateOne) AddCreatedById(i int) *ScriptUpdateOne {
	suo.mutation.AddCreatedById(i)
	return suo
}

// SetRegionId sets the "regionId" field.
func (suo *ScriptUpdateOne) SetRegionId(i int) *ScriptUpdateOne {
	suo.mutation.ResetRegionId()
	suo.mutation.SetRegionId(i)
	return suo
}

// SetNillableRegionId sets the "regionId" field if the given value is not nil.
func (suo *ScriptUpdateOne) SetNillableRegionId(i *int) *ScriptUpdateOne {
	if i != nil {
		suo.SetRegionId(*i)
	}
	return suo
}

// AddRegionId adds i to the "regionId" field.
func (suo *ScriptUpdateOne) AddRegionId(i int) *ScriptUpdateOne {
	suo.mutation.AddRegionId(i)
	return suo
}

// SetManagerId sets the "managerId" field.
func (suo *ScriptUpdateOne) SetManagerId(i int) *ScriptUpdateOne {
	suo.mutation.ResetManagerId()
	suo.mutation.SetManagerId(i)
	return suo
}

// SetNillableManagerId sets the "managerId" field if the given value is not nil.
func (suo *ScriptUpdateOne) SetNillableManagerId(i *int) *ScriptUpdateOne {
	if i != nil {
		suo.SetManagerId(*i)
	}
	return suo
}

// AddManagerId adds i to the "managerId" field.
func (suo *ScriptUpdateOne) AddManagerId(i int) *ScriptUpdateOne {
	suo.mutation.AddManagerId(i)
	return suo
}

// SetManagerGroupId sets the "managerGroupId" field.
func (suo *ScriptUpdateOne) SetManagerGroupId(i int) *ScriptUpdateOne {
	suo.mutation.ResetManagerGroupId()
	suo.mutation.SetManagerGroupId(i)
	return suo
}

// SetNillableManagerGroupId sets the "managerGroupId" field if the given value is not nil.
func (suo *ScriptUpdateOne) SetNillableManagerGroupId(i *int) *ScriptUpdateOne {
	if i != nil {
		suo.SetManagerGroupId(*i)
	}
	return suo
}

// AddManagerGroupId adds i to the "managerGroupId" field.
func (suo *ScriptUpdateOne) AddManagerGroupId(i int) *ScriptUpdateOne {
	suo.mutation.AddManagerGroupId(i)
	return suo
}

// SetStartTime sets the "startTime" field.
func (suo *ScriptUpdateOne) SetStartTime(t time.Time) *ScriptUpdateOne {
	suo.mutation.SetStartTime(t)
	return suo
}

// SetNillableStartTime sets the "startTime" field if the given value is not nil.
func (suo *ScriptUpdateOne) SetNillableStartTime(t *time.Time) *ScriptUpdateOne {
	if t != nil {
		suo.SetStartTime(*t)
	}
	return suo
}

// SetEndTime sets the "endTime" field.
func (suo *ScriptUpdateOne) SetEndTime(t time.Time) *ScriptUpdateOne {
	suo.mutation.SetEndTime(t)
	return suo
}

// SetNillableEndTime sets the "endTime" field if the given value is not nil.
func (suo *ScriptUpdateOne) SetNillableEndTime(t *time.Time) *ScriptUpdateOne {
	if t != nil {
		suo.SetEndTime(*t)
	}
	return suo
}

// Mutation returns the ScriptMutation object of the builder.
func (suo *ScriptUpdateOne) Mutation() *ScriptMutation {
	return suo.mutation
}

// Where appends a list predicates to the ScriptUpdate builder.
func (suo *ScriptUpdateOne) Where(ps ...predicate.Script) *ScriptUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *ScriptUpdateOne) Select(field string, fields ...string) *ScriptUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Script entity.
func (suo *ScriptUpdateOne) Save(ctx context.Context) (*Script, error) {
	suo.defaults()
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *ScriptUpdateOne) SaveX(ctx context.Context) *Script {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *ScriptUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *ScriptUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *ScriptUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		v := script.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
}

func (suo *ScriptUpdateOne) sqlSave(ctx context.Context) (_node *Script, err error) {
	_spec := sqlgraph.NewUpdateSpec(script.Table, script.Columns, sqlgraph.NewFieldSpec(script.FieldID, field.TypeInt64))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Script.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, script.FieldID)
		for _, f := range fields {
			if !script.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != script.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Program(); ok {
		_spec.SetField(script.FieldProgram, field.TypeString, value)
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(script.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := suo.mutation.JobId(); ok {
		_spec.SetField(script.FieldJobId, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedJobId(); ok {
		_spec.AddField(script.FieldJobId, field.TypeInt, value)
	}
	if value, ok := suo.mutation.Hostname(); ok {
		_spec.SetField(script.FieldHostname, field.TypeString, value)
	}
	if value, ok := suo.mutation.Command(); ok {
		_spec.SetField(script.FieldCommand, field.TypeString, value)
	}
	if value, ok := suo.mutation.Comment(); ok {
		_spec.SetField(script.FieldComment, field.TypeString, value)
	}
	if value, ok := suo.mutation.Usable(); ok {
		_spec.SetField(script.FieldUsable, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedUsable(); ok {
		_spec.AddField(script.FieldUsable, field.TypeInt, value)
	}
	if value, ok := suo.mutation.RepeatInterval(); ok {
		_spec.SetField(script.FieldRepeatInterval, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedRepeatInterval(); ok {
		_spec.AddField(script.FieldRepeatInterval, field.TypeInt, value)
	}
	if value, ok := suo.mutation.UpdatedById(); ok {
		_spec.SetField(script.FieldUpdatedById, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedUpdatedById(); ok {
		_spec.AddField(script.FieldUpdatedById, field.TypeInt, value)
	}
	if value, ok := suo.mutation.CreatedById(); ok {
		_spec.SetField(script.FieldCreatedById, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedCreatedById(); ok {
		_spec.AddField(script.FieldCreatedById, field.TypeInt, value)
	}
	if value, ok := suo.mutation.RegionId(); ok {
		_spec.SetField(script.FieldRegionId, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedRegionId(); ok {
		_spec.AddField(script.FieldRegionId, field.TypeInt, value)
	}
	if value, ok := suo.mutation.ManagerId(); ok {
		_spec.SetField(script.FieldManagerId, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedManagerId(); ok {
		_spec.AddField(script.FieldManagerId, field.TypeInt, value)
	}
	if value, ok := suo.mutation.ManagerGroupId(); ok {
		_spec.SetField(script.FieldManagerGroupId, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedManagerGroupId(); ok {
		_spec.AddField(script.FieldManagerGroupId, field.TypeInt, value)
	}
	if value, ok := suo.mutation.StartTime(); ok {
		_spec.SetField(script.FieldStartTime, field.TypeTime, value)
	}
	if value, ok := suo.mutation.EndTime(); ok {
		_spec.SetField(script.FieldEndTime, field.TypeTime, value)
	}
	_node = &Script{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{script.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
