// Code generated by ent, DO NOT EDIT.

package ent

import (
	"datacatAgent/ent/executionlog"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ExecutionLog is the model entity for the ExecutionLog schema.
type ExecutionLog struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// Status holds the value of the "status" field.
	Status int `json:"status,omitempty"`
	// Result holds the value of the "result" field.
	Result string `json:"result,omitempty"`
	// ExecutedAt holds the value of the "executedAt" field.
	ExecutedAt time.Time `json:"executedAt,omitempty"`
	// ScriptId holds the value of the "scriptId" field.
	ScriptId     int `json:"scriptId,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ExecutionLog) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case executionlog.FieldID, executionlog.FieldStatus, executionlog.FieldScriptId:
			values[i] = new(sql.NullInt64)
		case executionlog.FieldResult:
			values[i] = new(sql.NullString)
		case executionlog.FieldExecutedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ExecutionLog fields.
func (el *ExecutionLog) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case executionlog.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			el.ID = int64(value.Int64)
		case executionlog.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				el.Status = int(value.Int64)
			}
		case executionlog.FieldResult:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field result", values[i])
			} else if value.Valid {
				el.Result = value.String
			}
		case executionlog.FieldExecutedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field executedAt", values[i])
			} else if value.Valid {
				el.ExecutedAt = value.Time
			}
		case executionlog.FieldScriptId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field scriptId", values[i])
			} else if value.Valid {
				el.ScriptId = int(value.Int64)
			}
		default:
			el.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ExecutionLog.
// This includes values selected through modifiers, order, etc.
func (el *ExecutionLog) Value(name string) (ent.Value, error) {
	return el.selectValues.Get(name)
}

// Update returns a builder for updating this ExecutionLog.
// Note that you need to call ExecutionLog.Unwrap() before calling this method if this ExecutionLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (el *ExecutionLog) Update() *ExecutionLogUpdateOne {
	return NewExecutionLogClient(el.config).UpdateOne(el)
}

// Unwrap unwraps the ExecutionLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (el *ExecutionLog) Unwrap() *ExecutionLog {
	_tx, ok := el.config.driver.(*txDriver)
	if !ok {
		panic("ent: ExecutionLog is not a transactional entity")
	}
	el.config.driver = _tx.drv
	return el
}

// String implements the fmt.Stringer.
func (el *ExecutionLog) String() string {
	var builder strings.Builder
	builder.WriteString("ExecutionLog(")
	builder.WriteString(fmt.Sprintf("id=%v, ", el.ID))
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", el.Status))
	builder.WriteString(", ")
	builder.WriteString("result=")
	builder.WriteString(el.Result)
	builder.WriteString(", ")
	builder.WriteString("executedAt=")
	builder.WriteString(el.ExecutedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("scriptId=")
	builder.WriteString(fmt.Sprintf("%v", el.ScriptId))
	builder.WriteByte(')')
	return builder.String()
}

// ExecutionLogs is a parsable slice of ExecutionLog.
type ExecutionLogs []*ExecutionLog
