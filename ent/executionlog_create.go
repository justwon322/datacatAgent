// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"datacatAgent/ent/executionlog"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ExecutionLogCreate is the builder for creating a ExecutionLog entity.
type ExecutionLogCreate struct {
	config
	mutation *ExecutionLogMutation
	hooks    []Hook
}

// SetStatus sets the "status" field.
func (elc *ExecutionLogCreate) SetStatus(i int) *ExecutionLogCreate {
	elc.mutation.SetStatus(i)
	return elc
}

// SetResult sets the "result" field.
func (elc *ExecutionLogCreate) SetResult(s string) *ExecutionLogCreate {
	elc.mutation.SetResult(s)
	return elc
}

// SetExecutedAt sets the "executedAt" field.
func (elc *ExecutionLogCreate) SetExecutedAt(t time.Time) *ExecutionLogCreate {
	elc.mutation.SetExecutedAt(t)
	return elc
}

// SetNillableExecutedAt sets the "executedAt" field if the given value is not nil.
func (elc *ExecutionLogCreate) SetNillableExecutedAt(t *time.Time) *ExecutionLogCreate {
	if t != nil {
		elc.SetExecutedAt(*t)
	}
	return elc
}

// SetScriptId sets the "scriptId" field.
func (elc *ExecutionLogCreate) SetScriptId(i int) *ExecutionLogCreate {
	elc.mutation.SetScriptId(i)
	return elc
}

// SetID sets the "id" field.
func (elc *ExecutionLogCreate) SetID(i int64) *ExecutionLogCreate {
	elc.mutation.SetID(i)
	return elc
}

// Mutation returns the ExecutionLogMutation object of the builder.
func (elc *ExecutionLogCreate) Mutation() *ExecutionLogMutation {
	return elc.mutation
}

// Save creates the ExecutionLog in the database.
func (elc *ExecutionLogCreate) Save(ctx context.Context) (*ExecutionLog, error) {
	elc.defaults()
	return withHooks(ctx, elc.sqlSave, elc.mutation, elc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (elc *ExecutionLogCreate) SaveX(ctx context.Context) *ExecutionLog {
	v, err := elc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (elc *ExecutionLogCreate) Exec(ctx context.Context) error {
	_, err := elc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (elc *ExecutionLogCreate) ExecX(ctx context.Context) {
	if err := elc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (elc *ExecutionLogCreate) defaults() {
	if _, ok := elc.mutation.ExecutedAt(); !ok {
		v := executionlog.DefaultExecutedAt()
		elc.mutation.SetExecutedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (elc *ExecutionLogCreate) check() error {
	if _, ok := elc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "ExecutionLog.status"`)}
	}
	if _, ok := elc.mutation.Result(); !ok {
		return &ValidationError{Name: "result", err: errors.New(`ent: missing required field "ExecutionLog.result"`)}
	}
	if _, ok := elc.mutation.ExecutedAt(); !ok {
		return &ValidationError{Name: "executedAt", err: errors.New(`ent: missing required field "ExecutionLog.executedAt"`)}
	}
	if _, ok := elc.mutation.ScriptId(); !ok {
		return &ValidationError{Name: "scriptId", err: errors.New(`ent: missing required field "ExecutionLog.scriptId"`)}
	}
	return nil
}

func (elc *ExecutionLogCreate) sqlSave(ctx context.Context) (*ExecutionLog, error) {
	if err := elc.check(); err != nil {
		return nil, err
	}
	_node, _spec := elc.createSpec()
	if err := sqlgraph.CreateNode(ctx, elc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	elc.mutation.id = &_node.ID
	elc.mutation.done = true
	return _node, nil
}

func (elc *ExecutionLogCreate) createSpec() (*ExecutionLog, *sqlgraph.CreateSpec) {
	var (
		_node = &ExecutionLog{config: elc.config}
		_spec = sqlgraph.NewCreateSpec(executionlog.Table, sqlgraph.NewFieldSpec(executionlog.FieldID, field.TypeInt64))
	)
	if id, ok := elc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := elc.mutation.Status(); ok {
		_spec.SetField(executionlog.FieldStatus, field.TypeInt, value)
		_node.Status = value
	}
	if value, ok := elc.mutation.Result(); ok {
		_spec.SetField(executionlog.FieldResult, field.TypeString, value)
		_node.Result = value
	}
	if value, ok := elc.mutation.ExecutedAt(); ok {
		_spec.SetField(executionlog.FieldExecutedAt, field.TypeTime, value)
		_node.ExecutedAt = value
	}
	if value, ok := elc.mutation.ScriptId(); ok {
		_spec.SetField(executionlog.FieldScriptId, field.TypeInt, value)
		_node.ScriptId = value
	}
	return _node, _spec
}

// ExecutionLogCreateBulk is the builder for creating many ExecutionLog entities in bulk.
type ExecutionLogCreateBulk struct {
	config
	err      error
	builders []*ExecutionLogCreate
}

// Save creates the ExecutionLog entities in the database.
func (elcb *ExecutionLogCreateBulk) Save(ctx context.Context) ([]*ExecutionLog, error) {
	if elcb.err != nil {
		return nil, elcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(elcb.builders))
	nodes := make([]*ExecutionLog, len(elcb.builders))
	mutators := make([]Mutator, len(elcb.builders))
	for i := range elcb.builders {
		func(i int, root context.Context) {
			builder := elcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ExecutionLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, elcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, elcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, elcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (elcb *ExecutionLogCreateBulk) SaveX(ctx context.Context) []*ExecutionLog {
	v, err := elcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (elcb *ExecutionLogCreateBulk) Exec(ctx context.Context) error {
	_, err := elcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (elcb *ExecutionLogCreateBulk) ExecX(ctx context.Context) {
	if err := elcb.Exec(ctx); err != nil {
		panic(err)
	}
}
