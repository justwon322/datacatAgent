// Code generated by ent, DO NOT EDIT.

package messagemail

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the messagemail type in the database.
	Label = "message_mail"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSeq holds the string denoting the seq field in the database.
	FieldSeq = "seq"
	// FieldMailSubject holds the string denoting the mailsubject field in the database.
	FieldMailSubject = "mail_subject"
	// FieldMailContents holds the string denoting the mailcontents field in the database.
	FieldMailContents = "mail_contents"
	// FieldMailGb holds the string denoting the mailgb field in the database.
	FieldMailGb = "mail_gb"
	// FieldMailRecvGroup holds the string denoting the mailrecvgroup field in the database.
	FieldMailRecvGroup = "mail_recv_group"
	// FieldSent holds the string denoting the sent field in the database.
	FieldSent = "sent"
	// FieldSentAt holds the string denoting the sentat field in the database.
	FieldSentAt = "sentAt"
	// FieldCreatedById holds the string denoting the createdbyid field in the database.
	FieldCreatedById = "created_by_id"
	// FieldCreatedAt holds the string denoting the createdat field in the database.
	FieldCreatedAt = "createdAt"
	// FieldUpdatedById holds the string denoting the updatedbyid field in the database.
	FieldUpdatedById = "updated_by_id"
	// FieldUpdatedAt holds the string denoting the updatedat field in the database.
	FieldUpdatedAt = "updatedAt"
	// Table holds the table name of the messagemail in the database.
	Table = "message_mails"
)

// Columns holds all SQL columns for messagemail fields.
var Columns = []string{
	FieldID,
	FieldSeq,
	FieldMailSubject,
	FieldMailContents,
	FieldMailGb,
	FieldMailRecvGroup,
	FieldSent,
	FieldSentAt,
	FieldCreatedById,
	FieldCreatedAt,
	FieldUpdatedById,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultSentAt holds the default value on creation for the "sentAt" field.
	DefaultSentAt func() time.Time
	// UpdateDefaultSentAt holds the default value on update for the "sentAt" field.
	UpdateDefaultSentAt func() time.Time
	// DefaultCreatedAt holds the default value on creation for the "createdAt" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updatedAt" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updatedAt" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the MessageMail queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySeq orders the results by the seq field.
func BySeq(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSeq, opts...).ToFunc()
}

// ByMailSubject orders the results by the mailSubject field.
func ByMailSubject(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMailSubject, opts...).ToFunc()
}

// ByMailContents orders the results by the mailContents field.
func ByMailContents(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMailContents, opts...).ToFunc()
}

// ByMailGb orders the results by the mailGb field.
func ByMailGb(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMailGb, opts...).ToFunc()
}

// ByMailRecvGroup orders the results by the mailRecvGroup field.
func ByMailRecvGroup(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMailRecvGroup, opts...).ToFunc()
}

// BySent orders the results by the sent field.
func BySent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSent, opts...).ToFunc()
}

// BySentAt orders the results by the sentAt field.
func BySentAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSentAt, opts...).ToFunc()
}

// ByCreatedById orders the results by the createdById field.
func ByCreatedById(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedById, opts...).ToFunc()
}

// ByCreatedAt orders the results by the createdAt field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedById orders the results by the updatedById field.
func ByUpdatedById(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedById, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updatedAt field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}
