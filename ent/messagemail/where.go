// Code generated by ent, DO NOT EDIT.

package messagemail

import (
	"datacatAgent/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldLTE(FieldID, id))
}

// Seq applies equality check predicate on the "seq" field. It's identical to SeqEQ.
func Seq(v int64) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldEQ(FieldSeq, v))
}

// MailSubject applies equality check predicate on the "mailSubject" field. It's identical to MailSubjectEQ.
func MailSubject(v string) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldEQ(FieldMailSubject, v))
}

// MailContents applies equality check predicate on the "mailContents" field. It's identical to MailContentsEQ.
func MailContents(v string) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldEQ(FieldMailContents, v))
}

// MailGb applies equality check predicate on the "mailGb" field. It's identical to MailGbEQ.
func MailGb(v int) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldEQ(FieldMailGb, v))
}

// MailRecvGroup applies equality check predicate on the "mailRecvGroup" field. It's identical to MailRecvGroupEQ.
func MailRecvGroup(v string) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldEQ(FieldMailRecvGroup, v))
}

// Sent applies equality check predicate on the "sent" field. It's identical to SentEQ.
func Sent(v int) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldEQ(FieldSent, v))
}

// SentAt applies equality check predicate on the "sentAt" field. It's identical to SentAtEQ.
func SentAt(v time.Time) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldEQ(FieldSentAt, v))
}

// CreatedById applies equality check predicate on the "createdById" field. It's identical to CreatedByIdEQ.
func CreatedById(v int) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldEQ(FieldCreatedById, v))
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedById applies equality check predicate on the "updatedById" field. It's identical to UpdatedByIdEQ.
func UpdatedById(v int) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldEQ(FieldUpdatedById, v))
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldEQ(FieldUpdatedAt, v))
}

// SeqEQ applies the EQ predicate on the "seq" field.
func SeqEQ(v int64) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldEQ(FieldSeq, v))
}

// SeqNEQ applies the NEQ predicate on the "seq" field.
func SeqNEQ(v int64) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldNEQ(FieldSeq, v))
}

// SeqIn applies the In predicate on the "seq" field.
func SeqIn(vs ...int64) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldIn(FieldSeq, vs...))
}

// SeqNotIn applies the NotIn predicate on the "seq" field.
func SeqNotIn(vs ...int64) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldNotIn(FieldSeq, vs...))
}

// SeqGT applies the GT predicate on the "seq" field.
func SeqGT(v int64) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldGT(FieldSeq, v))
}

// SeqGTE applies the GTE predicate on the "seq" field.
func SeqGTE(v int64) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldGTE(FieldSeq, v))
}

// SeqLT applies the LT predicate on the "seq" field.
func SeqLT(v int64) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldLT(FieldSeq, v))
}

// SeqLTE applies the LTE predicate on the "seq" field.
func SeqLTE(v int64) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldLTE(FieldSeq, v))
}

// MailSubjectEQ applies the EQ predicate on the "mailSubject" field.
func MailSubjectEQ(v string) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldEQ(FieldMailSubject, v))
}

// MailSubjectNEQ applies the NEQ predicate on the "mailSubject" field.
func MailSubjectNEQ(v string) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldNEQ(FieldMailSubject, v))
}

// MailSubjectIn applies the In predicate on the "mailSubject" field.
func MailSubjectIn(vs ...string) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldIn(FieldMailSubject, vs...))
}

// MailSubjectNotIn applies the NotIn predicate on the "mailSubject" field.
func MailSubjectNotIn(vs ...string) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldNotIn(FieldMailSubject, vs...))
}

// MailSubjectGT applies the GT predicate on the "mailSubject" field.
func MailSubjectGT(v string) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldGT(FieldMailSubject, v))
}

// MailSubjectGTE applies the GTE predicate on the "mailSubject" field.
func MailSubjectGTE(v string) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldGTE(FieldMailSubject, v))
}

// MailSubjectLT applies the LT predicate on the "mailSubject" field.
func MailSubjectLT(v string) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldLT(FieldMailSubject, v))
}

// MailSubjectLTE applies the LTE predicate on the "mailSubject" field.
func MailSubjectLTE(v string) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldLTE(FieldMailSubject, v))
}

// MailSubjectContains applies the Contains predicate on the "mailSubject" field.
func MailSubjectContains(v string) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldContains(FieldMailSubject, v))
}

// MailSubjectHasPrefix applies the HasPrefix predicate on the "mailSubject" field.
func MailSubjectHasPrefix(v string) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldHasPrefix(FieldMailSubject, v))
}

// MailSubjectHasSuffix applies the HasSuffix predicate on the "mailSubject" field.
func MailSubjectHasSuffix(v string) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldHasSuffix(FieldMailSubject, v))
}

// MailSubjectEqualFold applies the EqualFold predicate on the "mailSubject" field.
func MailSubjectEqualFold(v string) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldEqualFold(FieldMailSubject, v))
}

// MailSubjectContainsFold applies the ContainsFold predicate on the "mailSubject" field.
func MailSubjectContainsFold(v string) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldContainsFold(FieldMailSubject, v))
}

// MailContentsEQ applies the EQ predicate on the "mailContents" field.
func MailContentsEQ(v string) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldEQ(FieldMailContents, v))
}

// MailContentsNEQ applies the NEQ predicate on the "mailContents" field.
func MailContentsNEQ(v string) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldNEQ(FieldMailContents, v))
}

// MailContentsIn applies the In predicate on the "mailContents" field.
func MailContentsIn(vs ...string) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldIn(FieldMailContents, vs...))
}

// MailContentsNotIn applies the NotIn predicate on the "mailContents" field.
func MailContentsNotIn(vs ...string) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldNotIn(FieldMailContents, vs...))
}

// MailContentsGT applies the GT predicate on the "mailContents" field.
func MailContentsGT(v string) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldGT(FieldMailContents, v))
}

// MailContentsGTE applies the GTE predicate on the "mailContents" field.
func MailContentsGTE(v string) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldGTE(FieldMailContents, v))
}

// MailContentsLT applies the LT predicate on the "mailContents" field.
func MailContentsLT(v string) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldLT(FieldMailContents, v))
}

// MailContentsLTE applies the LTE predicate on the "mailContents" field.
func MailContentsLTE(v string) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldLTE(FieldMailContents, v))
}

// MailContentsContains applies the Contains predicate on the "mailContents" field.
func MailContentsContains(v string) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldContains(FieldMailContents, v))
}

// MailContentsHasPrefix applies the HasPrefix predicate on the "mailContents" field.
func MailContentsHasPrefix(v string) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldHasPrefix(FieldMailContents, v))
}

// MailContentsHasSuffix applies the HasSuffix predicate on the "mailContents" field.
func MailContentsHasSuffix(v string) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldHasSuffix(FieldMailContents, v))
}

// MailContentsEqualFold applies the EqualFold predicate on the "mailContents" field.
func MailContentsEqualFold(v string) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldEqualFold(FieldMailContents, v))
}

// MailContentsContainsFold applies the ContainsFold predicate on the "mailContents" field.
func MailContentsContainsFold(v string) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldContainsFold(FieldMailContents, v))
}

// MailGbEQ applies the EQ predicate on the "mailGb" field.
func MailGbEQ(v int) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldEQ(FieldMailGb, v))
}

// MailGbNEQ applies the NEQ predicate on the "mailGb" field.
func MailGbNEQ(v int) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldNEQ(FieldMailGb, v))
}

// MailGbIn applies the In predicate on the "mailGb" field.
func MailGbIn(vs ...int) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldIn(FieldMailGb, vs...))
}

// MailGbNotIn applies the NotIn predicate on the "mailGb" field.
func MailGbNotIn(vs ...int) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldNotIn(FieldMailGb, vs...))
}

// MailGbGT applies the GT predicate on the "mailGb" field.
func MailGbGT(v int) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldGT(FieldMailGb, v))
}

// MailGbGTE applies the GTE predicate on the "mailGb" field.
func MailGbGTE(v int) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldGTE(FieldMailGb, v))
}

// MailGbLT applies the LT predicate on the "mailGb" field.
func MailGbLT(v int) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldLT(FieldMailGb, v))
}

// MailGbLTE applies the LTE predicate on the "mailGb" field.
func MailGbLTE(v int) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldLTE(FieldMailGb, v))
}

// MailRecvGroupEQ applies the EQ predicate on the "mailRecvGroup" field.
func MailRecvGroupEQ(v string) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldEQ(FieldMailRecvGroup, v))
}

// MailRecvGroupNEQ applies the NEQ predicate on the "mailRecvGroup" field.
func MailRecvGroupNEQ(v string) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldNEQ(FieldMailRecvGroup, v))
}

// MailRecvGroupIn applies the In predicate on the "mailRecvGroup" field.
func MailRecvGroupIn(vs ...string) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldIn(FieldMailRecvGroup, vs...))
}

// MailRecvGroupNotIn applies the NotIn predicate on the "mailRecvGroup" field.
func MailRecvGroupNotIn(vs ...string) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldNotIn(FieldMailRecvGroup, vs...))
}

// MailRecvGroupGT applies the GT predicate on the "mailRecvGroup" field.
func MailRecvGroupGT(v string) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldGT(FieldMailRecvGroup, v))
}

// MailRecvGroupGTE applies the GTE predicate on the "mailRecvGroup" field.
func MailRecvGroupGTE(v string) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldGTE(FieldMailRecvGroup, v))
}

// MailRecvGroupLT applies the LT predicate on the "mailRecvGroup" field.
func MailRecvGroupLT(v string) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldLT(FieldMailRecvGroup, v))
}

// MailRecvGroupLTE applies the LTE predicate on the "mailRecvGroup" field.
func MailRecvGroupLTE(v string) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldLTE(FieldMailRecvGroup, v))
}

// MailRecvGroupContains applies the Contains predicate on the "mailRecvGroup" field.
func MailRecvGroupContains(v string) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldContains(FieldMailRecvGroup, v))
}

// MailRecvGroupHasPrefix applies the HasPrefix predicate on the "mailRecvGroup" field.
func MailRecvGroupHasPrefix(v string) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldHasPrefix(FieldMailRecvGroup, v))
}

// MailRecvGroupHasSuffix applies the HasSuffix predicate on the "mailRecvGroup" field.
func MailRecvGroupHasSuffix(v string) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldHasSuffix(FieldMailRecvGroup, v))
}

// MailRecvGroupEqualFold applies the EqualFold predicate on the "mailRecvGroup" field.
func MailRecvGroupEqualFold(v string) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldEqualFold(FieldMailRecvGroup, v))
}

// MailRecvGroupContainsFold applies the ContainsFold predicate on the "mailRecvGroup" field.
func MailRecvGroupContainsFold(v string) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldContainsFold(FieldMailRecvGroup, v))
}

// SentEQ applies the EQ predicate on the "sent" field.
func SentEQ(v int) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldEQ(FieldSent, v))
}

// SentNEQ applies the NEQ predicate on the "sent" field.
func SentNEQ(v int) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldNEQ(FieldSent, v))
}

// SentIn applies the In predicate on the "sent" field.
func SentIn(vs ...int) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldIn(FieldSent, vs...))
}

// SentNotIn applies the NotIn predicate on the "sent" field.
func SentNotIn(vs ...int) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldNotIn(FieldSent, vs...))
}

// SentGT applies the GT predicate on the "sent" field.
func SentGT(v int) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldGT(FieldSent, v))
}

// SentGTE applies the GTE predicate on the "sent" field.
func SentGTE(v int) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldGTE(FieldSent, v))
}

// SentLT applies the LT predicate on the "sent" field.
func SentLT(v int) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldLT(FieldSent, v))
}

// SentLTE applies the LTE predicate on the "sent" field.
func SentLTE(v int) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldLTE(FieldSent, v))
}

// SentAtEQ applies the EQ predicate on the "sentAt" field.
func SentAtEQ(v time.Time) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldEQ(FieldSentAt, v))
}

// SentAtNEQ applies the NEQ predicate on the "sentAt" field.
func SentAtNEQ(v time.Time) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldNEQ(FieldSentAt, v))
}

// SentAtIn applies the In predicate on the "sentAt" field.
func SentAtIn(vs ...time.Time) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldIn(FieldSentAt, vs...))
}

// SentAtNotIn applies the NotIn predicate on the "sentAt" field.
func SentAtNotIn(vs ...time.Time) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldNotIn(FieldSentAt, vs...))
}

// SentAtGT applies the GT predicate on the "sentAt" field.
func SentAtGT(v time.Time) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldGT(FieldSentAt, v))
}

// SentAtGTE applies the GTE predicate on the "sentAt" field.
func SentAtGTE(v time.Time) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldGTE(FieldSentAt, v))
}

// SentAtLT applies the LT predicate on the "sentAt" field.
func SentAtLT(v time.Time) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldLT(FieldSentAt, v))
}

// SentAtLTE applies the LTE predicate on the "sentAt" field.
func SentAtLTE(v time.Time) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldLTE(FieldSentAt, v))
}

// CreatedByIdEQ applies the EQ predicate on the "createdById" field.
func CreatedByIdEQ(v int) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldEQ(FieldCreatedById, v))
}

// CreatedByIdNEQ applies the NEQ predicate on the "createdById" field.
func CreatedByIdNEQ(v int) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldNEQ(FieldCreatedById, v))
}

// CreatedByIdIn applies the In predicate on the "createdById" field.
func CreatedByIdIn(vs ...int) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldIn(FieldCreatedById, vs...))
}

// CreatedByIdNotIn applies the NotIn predicate on the "createdById" field.
func CreatedByIdNotIn(vs ...int) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldNotIn(FieldCreatedById, vs...))
}

// CreatedByIdGT applies the GT predicate on the "createdById" field.
func CreatedByIdGT(v int) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldGT(FieldCreatedById, v))
}

// CreatedByIdGTE applies the GTE predicate on the "createdById" field.
func CreatedByIdGTE(v int) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldGTE(FieldCreatedById, v))
}

// CreatedByIdLT applies the LT predicate on the "createdById" field.
func CreatedByIdLT(v int) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldLT(FieldCreatedById, v))
}

// CreatedByIdLTE applies the LTE predicate on the "createdById" field.
func CreatedByIdLTE(v int) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldLTE(FieldCreatedById, v))
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v time.Time) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v time.Time) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...time.Time) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v time.Time) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v time.Time) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v time.Time) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v time.Time) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedByIdEQ applies the EQ predicate on the "updatedById" field.
func UpdatedByIdEQ(v int) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldEQ(FieldUpdatedById, v))
}

// UpdatedByIdNEQ applies the NEQ predicate on the "updatedById" field.
func UpdatedByIdNEQ(v int) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldNEQ(FieldUpdatedById, v))
}

// UpdatedByIdIn applies the In predicate on the "updatedById" field.
func UpdatedByIdIn(vs ...int) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldIn(FieldUpdatedById, vs...))
}

// UpdatedByIdNotIn applies the NotIn predicate on the "updatedById" field.
func UpdatedByIdNotIn(vs ...int) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldNotIn(FieldUpdatedById, vs...))
}

// UpdatedByIdGT applies the GT predicate on the "updatedById" field.
func UpdatedByIdGT(v int) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldGT(FieldUpdatedById, v))
}

// UpdatedByIdGTE applies the GTE predicate on the "updatedById" field.
func UpdatedByIdGTE(v int) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldGTE(FieldUpdatedById, v))
}

// UpdatedByIdLT applies the LT predicate on the "updatedById" field.
func UpdatedByIdLT(v int) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldLT(FieldUpdatedById, v))
}

// UpdatedByIdLTE applies the LTE predicate on the "updatedById" field.
func UpdatedByIdLTE(v int) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldLTE(FieldUpdatedById, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v time.Time) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v time.Time) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.MessageMail {
	return predicate.MessageMail(sql.FieldLTE(FieldUpdatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.MessageMail) predicate.MessageMail {
	return predicate.MessageMail(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.MessageMail) predicate.MessageMail {
	return predicate.MessageMail(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MessageMail) predicate.MessageMail {
	return predicate.MessageMail(sql.NotPredicates(p))
}
