// Code generated by ent, DO NOT EDIT.

package ent

import (
	"datacatAgent/ent/categorymain"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// CategoryMain is the model entity for the CategoryMain schema.
type CategoryMain struct {
	config `json:"-"`
	// ID of the ent.
	ID int32 `json:"id,omitempty"`
	// Program holds the value of the "program" field.
	Program string `json:"program,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Priority holds the value of the "priority" field.
	Priority int `json:"priority,omitempty"`
	// UpdatedById holds the value of the "updatedById" field.
	UpdatedById int `json:"updatedById,omitempty"`
	// CreatedById holds the value of the "createdById" field.
	CreatedById  int `json:"createdById,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CategoryMain) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case categorymain.FieldID, categorymain.FieldPriority, categorymain.FieldUpdatedById, categorymain.FieldCreatedById:
			values[i] = new(sql.NullInt64)
		case categorymain.FieldProgram, categorymain.FieldName:
			values[i] = new(sql.NullString)
		case categorymain.FieldUpdatedAt, categorymain.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CategoryMain fields.
func (cm *CategoryMain) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case categorymain.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cm.ID = int32(value.Int64)
		case categorymain.FieldProgram:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field program", values[i])
			} else if value.Valid {
				cm.Program = value.String
			}
		case categorymain.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				cm.UpdatedAt = value.Time
			}
		case categorymain.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				cm.CreatedAt = value.Time
			}
		case categorymain.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				cm.Name = value.String
			}
		case categorymain.FieldPriority:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field priority", values[i])
			} else if value.Valid {
				cm.Priority = int(value.Int64)
			}
		case categorymain.FieldUpdatedById:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updatedById", values[i])
			} else if value.Valid {
				cm.UpdatedById = int(value.Int64)
			}
		case categorymain.FieldCreatedById:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field createdById", values[i])
			} else if value.Valid {
				cm.CreatedById = int(value.Int64)
			}
		default:
			cm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CategoryMain.
// This includes values selected through modifiers, order, etc.
func (cm *CategoryMain) Value(name string) (ent.Value, error) {
	return cm.selectValues.Get(name)
}

// Update returns a builder for updating this CategoryMain.
// Note that you need to call CategoryMain.Unwrap() before calling this method if this CategoryMain
// was returned from a transaction, and the transaction was committed or rolled back.
func (cm *CategoryMain) Update() *CategoryMainUpdateOne {
	return NewCategoryMainClient(cm.config).UpdateOne(cm)
}

// Unwrap unwraps the CategoryMain entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cm *CategoryMain) Unwrap() *CategoryMain {
	_tx, ok := cm.config.driver.(*txDriver)
	if !ok {
		panic("ent: CategoryMain is not a transactional entity")
	}
	cm.config.driver = _tx.drv
	return cm
}

// String implements the fmt.Stringer.
func (cm *CategoryMain) String() string {
	var builder strings.Builder
	builder.WriteString("CategoryMain(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cm.ID))
	builder.WriteString("program=")
	builder.WriteString(cm.Program)
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(cm.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("createdAt=")
	builder.WriteString(cm.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(cm.Name)
	builder.WriteString(", ")
	builder.WriteString("priority=")
	builder.WriteString(fmt.Sprintf("%v", cm.Priority))
	builder.WriteString(", ")
	builder.WriteString("updatedById=")
	builder.WriteString(fmt.Sprintf("%v", cm.UpdatedById))
	builder.WriteString(", ")
	builder.WriteString("createdById=")
	builder.WriteString(fmt.Sprintf("%v", cm.CreatedById))
	builder.WriteByte(')')
	return builder.String()
}

// CategoryMains is a parsable slice of CategoryMain.
type CategoryMains []*CategoryMain
