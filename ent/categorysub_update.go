// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"datacatAgent/ent/categorysub"
	"datacatAgent/ent/predicate"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CategorySubUpdate is the builder for updating CategorySub entities.
type CategorySubUpdate struct {
	config
	hooks    []Hook
	mutation *CategorySubMutation
}

// Where appends a list predicates to the CategorySubUpdate builder.
func (csu *CategorySubUpdate) Where(ps ...predicate.CategorySub) *CategorySubUpdate {
	csu.mutation.Where(ps...)
	return csu
}

// SetProgram sets the "program" field.
func (csu *CategorySubUpdate) SetProgram(s string) *CategorySubUpdate {
	csu.mutation.SetProgram(s)
	return csu
}

// SetNillableProgram sets the "program" field if the given value is not nil.
func (csu *CategorySubUpdate) SetNillableProgram(s *string) *CategorySubUpdate {
	if s != nil {
		csu.SetProgram(*s)
	}
	return csu
}

// SetUpdatedAt sets the "updatedAt" field.
func (csu *CategorySubUpdate) SetUpdatedAt(t time.Time) *CategorySubUpdate {
	csu.mutation.SetUpdatedAt(t)
	return csu
}

// SetName sets the "name" field.
func (csu *CategorySubUpdate) SetName(s string) *CategorySubUpdate {
	csu.mutation.SetName(s)
	return csu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (csu *CategorySubUpdate) SetNillableName(s *string) *CategorySubUpdate {
	if s != nil {
		csu.SetName(*s)
	}
	return csu
}

// SetUpdatedById sets the "updatedById" field.
func (csu *CategorySubUpdate) SetUpdatedById(i int) *CategorySubUpdate {
	csu.mutation.ResetUpdatedById()
	csu.mutation.SetUpdatedById(i)
	return csu
}

// SetNillableUpdatedById sets the "updatedById" field if the given value is not nil.
func (csu *CategorySubUpdate) SetNillableUpdatedById(i *int) *CategorySubUpdate {
	if i != nil {
		csu.SetUpdatedById(*i)
	}
	return csu
}

// AddUpdatedById adds i to the "updatedById" field.
func (csu *CategorySubUpdate) AddUpdatedById(i int) *CategorySubUpdate {
	csu.mutation.AddUpdatedById(i)
	return csu
}

// SetCreatedById sets the "createdById" field.
func (csu *CategorySubUpdate) SetCreatedById(i int) *CategorySubUpdate {
	csu.mutation.ResetCreatedById()
	csu.mutation.SetCreatedById(i)
	return csu
}

// SetNillableCreatedById sets the "createdById" field if the given value is not nil.
func (csu *CategorySubUpdate) SetNillableCreatedById(i *int) *CategorySubUpdate {
	if i != nil {
		csu.SetCreatedById(*i)
	}
	return csu
}

// AddCreatedById adds i to the "createdById" field.
func (csu *CategorySubUpdate) AddCreatedById(i int) *CategorySubUpdate {
	csu.mutation.AddCreatedById(i)
	return csu
}

// SetCategoryMainId sets the "categoryMainId" field.
func (csu *CategorySubUpdate) SetCategoryMainId(i int32) *CategorySubUpdate {
	csu.mutation.ResetCategoryMainId()
	csu.mutation.SetCategoryMainId(i)
	return csu
}

// SetNillableCategoryMainId sets the "categoryMainId" field if the given value is not nil.
func (csu *CategorySubUpdate) SetNillableCategoryMainId(i *int32) *CategorySubUpdate {
	if i != nil {
		csu.SetCategoryMainId(*i)
	}
	return csu
}

// AddCategoryMainId adds i to the "categoryMainId" field.
func (csu *CategorySubUpdate) AddCategoryMainId(i int32) *CategorySubUpdate {
	csu.mutation.AddCategoryMainId(i)
	return csu
}

// Mutation returns the CategorySubMutation object of the builder.
func (csu *CategorySubUpdate) Mutation() *CategorySubMutation {
	return csu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (csu *CategorySubUpdate) Save(ctx context.Context) (int, error) {
	csu.defaults()
	return withHooks(ctx, csu.sqlSave, csu.mutation, csu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (csu *CategorySubUpdate) SaveX(ctx context.Context) int {
	affected, err := csu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (csu *CategorySubUpdate) Exec(ctx context.Context) error {
	_, err := csu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csu *CategorySubUpdate) ExecX(ctx context.Context) {
	if err := csu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (csu *CategorySubUpdate) defaults() {
	if _, ok := csu.mutation.UpdatedAt(); !ok {
		v := categorysub.UpdateDefaultUpdatedAt()
		csu.mutation.SetUpdatedAt(v)
	}
}

func (csu *CategorySubUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(categorysub.Table, categorysub.Columns, sqlgraph.NewFieldSpec(categorysub.FieldID, field.TypeInt32))
	if ps := csu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := csu.mutation.Program(); ok {
		_spec.SetField(categorysub.FieldProgram, field.TypeString, value)
	}
	if value, ok := csu.mutation.UpdatedAt(); ok {
		_spec.SetField(categorysub.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := csu.mutation.Name(); ok {
		_spec.SetField(categorysub.FieldName, field.TypeString, value)
	}
	if value, ok := csu.mutation.UpdatedById(); ok {
		_spec.SetField(categorysub.FieldUpdatedById, field.TypeInt, value)
	}
	if value, ok := csu.mutation.AddedUpdatedById(); ok {
		_spec.AddField(categorysub.FieldUpdatedById, field.TypeInt, value)
	}
	if value, ok := csu.mutation.CreatedById(); ok {
		_spec.SetField(categorysub.FieldCreatedById, field.TypeInt, value)
	}
	if value, ok := csu.mutation.AddedCreatedById(); ok {
		_spec.AddField(categorysub.FieldCreatedById, field.TypeInt, value)
	}
	if value, ok := csu.mutation.CategoryMainId(); ok {
		_spec.SetField(categorysub.FieldCategoryMainId, field.TypeInt32, value)
	}
	if value, ok := csu.mutation.AddedCategoryMainId(); ok {
		_spec.AddField(categorysub.FieldCategoryMainId, field.TypeInt32, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, csu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{categorysub.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	csu.mutation.done = true
	return n, nil
}

// CategorySubUpdateOne is the builder for updating a single CategorySub entity.
type CategorySubUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CategorySubMutation
}

// SetProgram sets the "program" field.
func (csuo *CategorySubUpdateOne) SetProgram(s string) *CategorySubUpdateOne {
	csuo.mutation.SetProgram(s)
	return csuo
}

// SetNillableProgram sets the "program" field if the given value is not nil.
func (csuo *CategorySubUpdateOne) SetNillableProgram(s *string) *CategorySubUpdateOne {
	if s != nil {
		csuo.SetProgram(*s)
	}
	return csuo
}

// SetUpdatedAt sets the "updatedAt" field.
func (csuo *CategorySubUpdateOne) SetUpdatedAt(t time.Time) *CategorySubUpdateOne {
	csuo.mutation.SetUpdatedAt(t)
	return csuo
}

// SetName sets the "name" field.
func (csuo *CategorySubUpdateOne) SetName(s string) *CategorySubUpdateOne {
	csuo.mutation.SetName(s)
	return csuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (csuo *CategorySubUpdateOne) SetNillableName(s *string) *CategorySubUpdateOne {
	if s != nil {
		csuo.SetName(*s)
	}
	return csuo
}

// SetUpdatedById sets the "updatedById" field.
func (csuo *CategorySubUpdateOne) SetUpdatedById(i int) *CategorySubUpdateOne {
	csuo.mutation.ResetUpdatedById()
	csuo.mutation.SetUpdatedById(i)
	return csuo
}

// SetNillableUpdatedById sets the "updatedById" field if the given value is not nil.
func (csuo *CategorySubUpdateOne) SetNillableUpdatedById(i *int) *CategorySubUpdateOne {
	if i != nil {
		csuo.SetUpdatedById(*i)
	}
	return csuo
}

// AddUpdatedById adds i to the "updatedById" field.
func (csuo *CategorySubUpdateOne) AddUpdatedById(i int) *CategorySubUpdateOne {
	csuo.mutation.AddUpdatedById(i)
	return csuo
}

// SetCreatedById sets the "createdById" field.
func (csuo *CategorySubUpdateOne) SetCreatedById(i int) *CategorySubUpdateOne {
	csuo.mutation.ResetCreatedById()
	csuo.mutation.SetCreatedById(i)
	return csuo
}

// SetNillableCreatedById sets the "createdById" field if the given value is not nil.
func (csuo *CategorySubUpdateOne) SetNillableCreatedById(i *int) *CategorySubUpdateOne {
	if i != nil {
		csuo.SetCreatedById(*i)
	}
	return csuo
}

// AddCreatedById adds i to the "createdById" field.
func (csuo *CategorySubUpdateOne) AddCreatedById(i int) *CategorySubUpdateOne {
	csuo.mutation.AddCreatedById(i)
	return csuo
}

// SetCategoryMainId sets the "categoryMainId" field.
func (csuo *CategorySubUpdateOne) SetCategoryMainId(i int32) *CategorySubUpdateOne {
	csuo.mutation.ResetCategoryMainId()
	csuo.mutation.SetCategoryMainId(i)
	return csuo
}

// SetNillableCategoryMainId sets the "categoryMainId" field if the given value is not nil.
func (csuo *CategorySubUpdateOne) SetNillableCategoryMainId(i *int32) *CategorySubUpdateOne {
	if i != nil {
		csuo.SetCategoryMainId(*i)
	}
	return csuo
}

// AddCategoryMainId adds i to the "categoryMainId" field.
func (csuo *CategorySubUpdateOne) AddCategoryMainId(i int32) *CategorySubUpdateOne {
	csuo.mutation.AddCategoryMainId(i)
	return csuo
}

// Mutation returns the CategorySubMutation object of the builder.
func (csuo *CategorySubUpdateOne) Mutation() *CategorySubMutation {
	return csuo.mutation
}

// Where appends a list predicates to the CategorySubUpdate builder.
func (csuo *CategorySubUpdateOne) Where(ps ...predicate.CategorySub) *CategorySubUpdateOne {
	csuo.mutation.Where(ps...)
	return csuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (csuo *CategorySubUpdateOne) Select(field string, fields ...string) *CategorySubUpdateOne {
	csuo.fields = append([]string{field}, fields...)
	return csuo
}

// Save executes the query and returns the updated CategorySub entity.
func (csuo *CategorySubUpdateOne) Save(ctx context.Context) (*CategorySub, error) {
	csuo.defaults()
	return withHooks(ctx, csuo.sqlSave, csuo.mutation, csuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (csuo *CategorySubUpdateOne) SaveX(ctx context.Context) *CategorySub {
	node, err := csuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (csuo *CategorySubUpdateOne) Exec(ctx context.Context) error {
	_, err := csuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csuo *CategorySubUpdateOne) ExecX(ctx context.Context) {
	if err := csuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (csuo *CategorySubUpdateOne) defaults() {
	if _, ok := csuo.mutation.UpdatedAt(); !ok {
		v := categorysub.UpdateDefaultUpdatedAt()
		csuo.mutation.SetUpdatedAt(v)
	}
}

func (csuo *CategorySubUpdateOne) sqlSave(ctx context.Context) (_node *CategorySub, err error) {
	_spec := sqlgraph.NewUpdateSpec(categorysub.Table, categorysub.Columns, sqlgraph.NewFieldSpec(categorysub.FieldID, field.TypeInt32))
	id, ok := csuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CategorySub.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := csuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, categorysub.FieldID)
		for _, f := range fields {
			if !categorysub.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != categorysub.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := csuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := csuo.mutation.Program(); ok {
		_spec.SetField(categorysub.FieldProgram, field.TypeString, value)
	}
	if value, ok := csuo.mutation.UpdatedAt(); ok {
		_spec.SetField(categorysub.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := csuo.mutation.Name(); ok {
		_spec.SetField(categorysub.FieldName, field.TypeString, value)
	}
	if value, ok := csuo.mutation.UpdatedById(); ok {
		_spec.SetField(categorysub.FieldUpdatedById, field.TypeInt, value)
	}
	if value, ok := csuo.mutation.AddedUpdatedById(); ok {
		_spec.AddField(categorysub.FieldUpdatedById, field.TypeInt, value)
	}
	if value, ok := csuo.mutation.CreatedById(); ok {
		_spec.SetField(categorysub.FieldCreatedById, field.TypeInt, value)
	}
	if value, ok := csuo.mutation.AddedCreatedById(); ok {
		_spec.AddField(categorysub.FieldCreatedById, field.TypeInt, value)
	}
	if value, ok := csuo.mutation.CategoryMainId(); ok {
		_spec.SetField(categorysub.FieldCategoryMainId, field.TypeInt32, value)
	}
	if value, ok := csuo.mutation.AddedCategoryMainId(); ok {
		_spec.AddField(categorysub.FieldCategoryMainId, field.TypeInt32, value)
	}
	_node = &CategorySub{config: csuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, csuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{categorysub.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	csuo.mutation.done = true
	return _node, nil
}
