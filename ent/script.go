// Code generated by ent, DO NOT EDIT.

package ent

import (
	"datacatAgent/ent/script"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Script is the model entity for the Script schema.
type Script struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// Program holds the value of the "program" field.
	Program string `json:"program,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// JobId holds the value of the "jobId" field.
	JobId int `json:"jobId,omitempty"`
	// Hostname holds the value of the "hostname" field.
	Hostname string `json:"hostname,omitempty"`
	// Command holds the value of the "command" field.
	Command string `json:"command,omitempty"`
	// Comment holds the value of the "comment" field.
	Comment string `json:"comment,omitempty"`
	// Usable holds the value of the "usable" field.
	Usable int `json:"usable,omitempty"`
	// RepeatInterval holds the value of the "repeatInterval" field.
	RepeatInterval int `json:"repeatInterval,omitempty"`
	// UpdatedById holds the value of the "updatedById" field.
	UpdatedById int `json:"updatedById,omitempty"`
	// CreatedById holds the value of the "createdById" field.
	CreatedById int `json:"createdById,omitempty"`
	// RegionId holds the value of the "regionId" field.
	RegionId int `json:"regionId,omitempty"`
	// ManagerId holds the value of the "managerId" field.
	ManagerId int `json:"managerId,omitempty"`
	// ManagerGroupId holds the value of the "managerGroupId" field.
	ManagerGroupId int `json:"managerGroupId,omitempty"`
	// StartTime holds the value of the "startTime" field.
	StartTime time.Time `json:"startTime,omitempty"`
	// EndTime holds the value of the "endTime" field.
	EndTime      time.Time `json:"endTime,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Script) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case script.FieldID, script.FieldJobId, script.FieldUsable, script.FieldRepeatInterval, script.FieldUpdatedById, script.FieldCreatedById, script.FieldRegionId, script.FieldManagerId, script.FieldManagerGroupId:
			values[i] = new(sql.NullInt64)
		case script.FieldProgram, script.FieldHostname, script.FieldCommand, script.FieldComment:
			values[i] = new(sql.NullString)
		case script.FieldUpdatedAt, script.FieldCreatedAt, script.FieldStartTime, script.FieldEndTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Script fields.
func (s *Script) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case script.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int64(value.Int64)
		case script.FieldProgram:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field program", values[i])
			} else if value.Valid {
				s.Program = value.String
			}
		case script.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				s.UpdatedAt = value.Time
			}
		case script.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		case script.FieldJobId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field jobId", values[i])
			} else if value.Valid {
				s.JobId = int(value.Int64)
			}
		case script.FieldHostname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hostname", values[i])
			} else if value.Valid {
				s.Hostname = value.String
			}
		case script.FieldCommand:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field command", values[i])
			} else if value.Valid {
				s.Command = value.String
			}
		case script.FieldComment:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comment", values[i])
			} else if value.Valid {
				s.Comment = value.String
			}
		case script.FieldUsable:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field usable", values[i])
			} else if value.Valid {
				s.Usable = int(value.Int64)
			}
		case script.FieldRepeatInterval:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field repeatInterval", values[i])
			} else if value.Valid {
				s.RepeatInterval = int(value.Int64)
			}
		case script.FieldUpdatedById:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updatedById", values[i])
			} else if value.Valid {
				s.UpdatedById = int(value.Int64)
			}
		case script.FieldCreatedById:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field createdById", values[i])
			} else if value.Valid {
				s.CreatedById = int(value.Int64)
			}
		case script.FieldRegionId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field regionId", values[i])
			} else if value.Valid {
				s.RegionId = int(value.Int64)
			}
		case script.FieldManagerId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field managerId", values[i])
			} else if value.Valid {
				s.ManagerId = int(value.Int64)
			}
		case script.FieldManagerGroupId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field managerGroupId", values[i])
			} else if value.Valid {
				s.ManagerGroupId = int(value.Int64)
			}
		case script.FieldStartTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field startTime", values[i])
			} else if value.Valid {
				s.StartTime = value.Time
			}
		case script.FieldEndTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field endTime", values[i])
			} else if value.Valid {
				s.EndTime = value.Time
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Script.
// This includes values selected through modifiers, order, etc.
func (s *Script) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// Update returns a builder for updating this Script.
// Note that you need to call Script.Unwrap() before calling this method if this Script
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Script) Update() *ScriptUpdateOne {
	return NewScriptClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Script entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Script) Unwrap() *Script {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Script is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Script) String() string {
	var builder strings.Builder
	builder.WriteString("Script(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("program=")
	builder.WriteString(s.Program)
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(s.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("createdAt=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("jobId=")
	builder.WriteString(fmt.Sprintf("%v", s.JobId))
	builder.WriteString(", ")
	builder.WriteString("hostname=")
	builder.WriteString(s.Hostname)
	builder.WriteString(", ")
	builder.WriteString("command=")
	builder.WriteString(s.Command)
	builder.WriteString(", ")
	builder.WriteString("comment=")
	builder.WriteString(s.Comment)
	builder.WriteString(", ")
	builder.WriteString("usable=")
	builder.WriteString(fmt.Sprintf("%v", s.Usable))
	builder.WriteString(", ")
	builder.WriteString("repeatInterval=")
	builder.WriteString(fmt.Sprintf("%v", s.RepeatInterval))
	builder.WriteString(", ")
	builder.WriteString("updatedById=")
	builder.WriteString(fmt.Sprintf("%v", s.UpdatedById))
	builder.WriteString(", ")
	builder.WriteString("createdById=")
	builder.WriteString(fmt.Sprintf("%v", s.CreatedById))
	builder.WriteString(", ")
	builder.WriteString("regionId=")
	builder.WriteString(fmt.Sprintf("%v", s.RegionId))
	builder.WriteString(", ")
	builder.WriteString("managerId=")
	builder.WriteString(fmt.Sprintf("%v", s.ManagerId))
	builder.WriteString(", ")
	builder.WriteString("managerGroupId=")
	builder.WriteString(fmt.Sprintf("%v", s.ManagerGroupId))
	builder.WriteString(", ")
	builder.WriteString("startTime=")
	builder.WriteString(s.StartTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("endTime=")
	builder.WriteString(s.EndTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Scripts is a parsable slice of Script.
type Scripts []*Script
