// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"datacatAgent/ent/categorymain"
	"datacatAgent/ent/predicate"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CategoryMainUpdate is the builder for updating CategoryMain entities.
type CategoryMainUpdate struct {
	config
	hooks    []Hook
	mutation *CategoryMainMutation
}

// Where appends a list predicates to the CategoryMainUpdate builder.
func (cmu *CategoryMainUpdate) Where(ps ...predicate.CategoryMain) *CategoryMainUpdate {
	cmu.mutation.Where(ps...)
	return cmu
}

// SetProgram sets the "program" field.
func (cmu *CategoryMainUpdate) SetProgram(s string) *CategoryMainUpdate {
	cmu.mutation.SetProgram(s)
	return cmu
}

// SetNillableProgram sets the "program" field if the given value is not nil.
func (cmu *CategoryMainUpdate) SetNillableProgram(s *string) *CategoryMainUpdate {
	if s != nil {
		cmu.SetProgram(*s)
	}
	return cmu
}

// SetUpdatedAt sets the "updatedAt" field.
func (cmu *CategoryMainUpdate) SetUpdatedAt(t time.Time) *CategoryMainUpdate {
	cmu.mutation.SetUpdatedAt(t)
	return cmu
}

// SetCreatedAt sets the "createdAt" field.
func (cmu *CategoryMainUpdate) SetCreatedAt(t time.Time) *CategoryMainUpdate {
	cmu.mutation.SetCreatedAt(t)
	return cmu
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (cmu *CategoryMainUpdate) SetNillableCreatedAt(t *time.Time) *CategoryMainUpdate {
	if t != nil {
		cmu.SetCreatedAt(*t)
	}
	return cmu
}

// SetName sets the "name" field.
func (cmu *CategoryMainUpdate) SetName(s string) *CategoryMainUpdate {
	cmu.mutation.SetName(s)
	return cmu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cmu *CategoryMainUpdate) SetNillableName(s *string) *CategoryMainUpdate {
	if s != nil {
		cmu.SetName(*s)
	}
	return cmu
}

// SetPriority sets the "priority" field.
func (cmu *CategoryMainUpdate) SetPriority(i int) *CategoryMainUpdate {
	cmu.mutation.ResetPriority()
	cmu.mutation.SetPriority(i)
	return cmu
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (cmu *CategoryMainUpdate) SetNillablePriority(i *int) *CategoryMainUpdate {
	if i != nil {
		cmu.SetPriority(*i)
	}
	return cmu
}

// AddPriority adds i to the "priority" field.
func (cmu *CategoryMainUpdate) AddPriority(i int) *CategoryMainUpdate {
	cmu.mutation.AddPriority(i)
	return cmu
}

// SetUpdatedById sets the "updatedById" field.
func (cmu *CategoryMainUpdate) SetUpdatedById(i int) *CategoryMainUpdate {
	cmu.mutation.ResetUpdatedById()
	cmu.mutation.SetUpdatedById(i)
	return cmu
}

// SetNillableUpdatedById sets the "updatedById" field if the given value is not nil.
func (cmu *CategoryMainUpdate) SetNillableUpdatedById(i *int) *CategoryMainUpdate {
	if i != nil {
		cmu.SetUpdatedById(*i)
	}
	return cmu
}

// AddUpdatedById adds i to the "updatedById" field.
func (cmu *CategoryMainUpdate) AddUpdatedById(i int) *CategoryMainUpdate {
	cmu.mutation.AddUpdatedById(i)
	return cmu
}

// SetCreatedById sets the "createdById" field.
func (cmu *CategoryMainUpdate) SetCreatedById(i int) *CategoryMainUpdate {
	cmu.mutation.ResetCreatedById()
	cmu.mutation.SetCreatedById(i)
	return cmu
}

// SetNillableCreatedById sets the "createdById" field if the given value is not nil.
func (cmu *CategoryMainUpdate) SetNillableCreatedById(i *int) *CategoryMainUpdate {
	if i != nil {
		cmu.SetCreatedById(*i)
	}
	return cmu
}

// AddCreatedById adds i to the "createdById" field.
func (cmu *CategoryMainUpdate) AddCreatedById(i int) *CategoryMainUpdate {
	cmu.mutation.AddCreatedById(i)
	return cmu
}

// Mutation returns the CategoryMainMutation object of the builder.
func (cmu *CategoryMainUpdate) Mutation() *CategoryMainMutation {
	return cmu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cmu *CategoryMainUpdate) Save(ctx context.Context) (int, error) {
	cmu.defaults()
	return withHooks(ctx, cmu.sqlSave, cmu.mutation, cmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cmu *CategoryMainUpdate) SaveX(ctx context.Context) int {
	affected, err := cmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cmu *CategoryMainUpdate) Exec(ctx context.Context) error {
	_, err := cmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmu *CategoryMainUpdate) ExecX(ctx context.Context) {
	if err := cmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cmu *CategoryMainUpdate) defaults() {
	if _, ok := cmu.mutation.UpdatedAt(); !ok {
		v := categorymain.UpdateDefaultUpdatedAt()
		cmu.mutation.SetUpdatedAt(v)
	}
}

func (cmu *CategoryMainUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(categorymain.Table, categorymain.Columns, sqlgraph.NewFieldSpec(categorymain.FieldID, field.TypeInt32))
	if ps := cmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cmu.mutation.Program(); ok {
		_spec.SetField(categorymain.FieldProgram, field.TypeString, value)
	}
	if value, ok := cmu.mutation.UpdatedAt(); ok {
		_spec.SetField(categorymain.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cmu.mutation.CreatedAt(); ok {
		_spec.SetField(categorymain.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := cmu.mutation.Name(); ok {
		_spec.SetField(categorymain.FieldName, field.TypeString, value)
	}
	if value, ok := cmu.mutation.Priority(); ok {
		_spec.SetField(categorymain.FieldPriority, field.TypeInt, value)
	}
	if value, ok := cmu.mutation.AddedPriority(); ok {
		_spec.AddField(categorymain.FieldPriority, field.TypeInt, value)
	}
	if value, ok := cmu.mutation.UpdatedById(); ok {
		_spec.SetField(categorymain.FieldUpdatedById, field.TypeInt, value)
	}
	if value, ok := cmu.mutation.AddedUpdatedById(); ok {
		_spec.AddField(categorymain.FieldUpdatedById, field.TypeInt, value)
	}
	if value, ok := cmu.mutation.CreatedById(); ok {
		_spec.SetField(categorymain.FieldCreatedById, field.TypeInt, value)
	}
	if value, ok := cmu.mutation.AddedCreatedById(); ok {
		_spec.AddField(categorymain.FieldCreatedById, field.TypeInt, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{categorymain.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cmu.mutation.done = true
	return n, nil
}

// CategoryMainUpdateOne is the builder for updating a single CategoryMain entity.
type CategoryMainUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CategoryMainMutation
}

// SetProgram sets the "program" field.
func (cmuo *CategoryMainUpdateOne) SetProgram(s string) *CategoryMainUpdateOne {
	cmuo.mutation.SetProgram(s)
	return cmuo
}

// SetNillableProgram sets the "program" field if the given value is not nil.
func (cmuo *CategoryMainUpdateOne) SetNillableProgram(s *string) *CategoryMainUpdateOne {
	if s != nil {
		cmuo.SetProgram(*s)
	}
	return cmuo
}

// SetUpdatedAt sets the "updatedAt" field.
func (cmuo *CategoryMainUpdateOne) SetUpdatedAt(t time.Time) *CategoryMainUpdateOne {
	cmuo.mutation.SetUpdatedAt(t)
	return cmuo
}

// SetCreatedAt sets the "createdAt" field.
func (cmuo *CategoryMainUpdateOne) SetCreatedAt(t time.Time) *CategoryMainUpdateOne {
	cmuo.mutation.SetCreatedAt(t)
	return cmuo
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (cmuo *CategoryMainUpdateOne) SetNillableCreatedAt(t *time.Time) *CategoryMainUpdateOne {
	if t != nil {
		cmuo.SetCreatedAt(*t)
	}
	return cmuo
}

// SetName sets the "name" field.
func (cmuo *CategoryMainUpdateOne) SetName(s string) *CategoryMainUpdateOne {
	cmuo.mutation.SetName(s)
	return cmuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cmuo *CategoryMainUpdateOne) SetNillableName(s *string) *CategoryMainUpdateOne {
	if s != nil {
		cmuo.SetName(*s)
	}
	return cmuo
}

// SetPriority sets the "priority" field.
func (cmuo *CategoryMainUpdateOne) SetPriority(i int) *CategoryMainUpdateOne {
	cmuo.mutation.ResetPriority()
	cmuo.mutation.SetPriority(i)
	return cmuo
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (cmuo *CategoryMainUpdateOne) SetNillablePriority(i *int) *CategoryMainUpdateOne {
	if i != nil {
		cmuo.SetPriority(*i)
	}
	return cmuo
}

// AddPriority adds i to the "priority" field.
func (cmuo *CategoryMainUpdateOne) AddPriority(i int) *CategoryMainUpdateOne {
	cmuo.mutation.AddPriority(i)
	return cmuo
}

// SetUpdatedById sets the "updatedById" field.
func (cmuo *CategoryMainUpdateOne) SetUpdatedById(i int) *CategoryMainUpdateOne {
	cmuo.mutation.ResetUpdatedById()
	cmuo.mutation.SetUpdatedById(i)
	return cmuo
}

// SetNillableUpdatedById sets the "updatedById" field if the given value is not nil.
func (cmuo *CategoryMainUpdateOne) SetNillableUpdatedById(i *int) *CategoryMainUpdateOne {
	if i != nil {
		cmuo.SetUpdatedById(*i)
	}
	return cmuo
}

// AddUpdatedById adds i to the "updatedById" field.
func (cmuo *CategoryMainUpdateOne) AddUpdatedById(i int) *CategoryMainUpdateOne {
	cmuo.mutation.AddUpdatedById(i)
	return cmuo
}

// SetCreatedById sets the "createdById" field.
func (cmuo *CategoryMainUpdateOne) SetCreatedById(i int) *CategoryMainUpdateOne {
	cmuo.mutation.ResetCreatedById()
	cmuo.mutation.SetCreatedById(i)
	return cmuo
}

// SetNillableCreatedById sets the "createdById" field if the given value is not nil.
func (cmuo *CategoryMainUpdateOne) SetNillableCreatedById(i *int) *CategoryMainUpdateOne {
	if i != nil {
		cmuo.SetCreatedById(*i)
	}
	return cmuo
}

// AddCreatedById adds i to the "createdById" field.
func (cmuo *CategoryMainUpdateOne) AddCreatedById(i int) *CategoryMainUpdateOne {
	cmuo.mutation.AddCreatedById(i)
	return cmuo
}

// Mutation returns the CategoryMainMutation object of the builder.
func (cmuo *CategoryMainUpdateOne) Mutation() *CategoryMainMutation {
	return cmuo.mutation
}

// Where appends a list predicates to the CategoryMainUpdate builder.
func (cmuo *CategoryMainUpdateOne) Where(ps ...predicate.CategoryMain) *CategoryMainUpdateOne {
	cmuo.mutation.Where(ps...)
	return cmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cmuo *CategoryMainUpdateOne) Select(field string, fields ...string) *CategoryMainUpdateOne {
	cmuo.fields = append([]string{field}, fields...)
	return cmuo
}

// Save executes the query and returns the updated CategoryMain entity.
func (cmuo *CategoryMainUpdateOne) Save(ctx context.Context) (*CategoryMain, error) {
	cmuo.defaults()
	return withHooks(ctx, cmuo.sqlSave, cmuo.mutation, cmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cmuo *CategoryMainUpdateOne) SaveX(ctx context.Context) *CategoryMain {
	node, err := cmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cmuo *CategoryMainUpdateOne) Exec(ctx context.Context) error {
	_, err := cmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmuo *CategoryMainUpdateOne) ExecX(ctx context.Context) {
	if err := cmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cmuo *CategoryMainUpdateOne) defaults() {
	if _, ok := cmuo.mutation.UpdatedAt(); !ok {
		v := categorymain.UpdateDefaultUpdatedAt()
		cmuo.mutation.SetUpdatedAt(v)
	}
}

func (cmuo *CategoryMainUpdateOne) sqlSave(ctx context.Context) (_node *CategoryMain, err error) {
	_spec := sqlgraph.NewUpdateSpec(categorymain.Table, categorymain.Columns, sqlgraph.NewFieldSpec(categorymain.FieldID, field.TypeInt32))
	id, ok := cmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CategoryMain.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, categorymain.FieldID)
		for _, f := range fields {
			if !categorymain.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != categorymain.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cmuo.mutation.Program(); ok {
		_spec.SetField(categorymain.FieldProgram, field.TypeString, value)
	}
	if value, ok := cmuo.mutation.UpdatedAt(); ok {
		_spec.SetField(categorymain.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cmuo.mutation.CreatedAt(); ok {
		_spec.SetField(categorymain.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := cmuo.mutation.Name(); ok {
		_spec.SetField(categorymain.FieldName, field.TypeString, value)
	}
	if value, ok := cmuo.mutation.Priority(); ok {
		_spec.SetField(categorymain.FieldPriority, field.TypeInt, value)
	}
	if value, ok := cmuo.mutation.AddedPriority(); ok {
		_spec.AddField(categorymain.FieldPriority, field.TypeInt, value)
	}
	if value, ok := cmuo.mutation.UpdatedById(); ok {
		_spec.SetField(categorymain.FieldUpdatedById, field.TypeInt, value)
	}
	if value, ok := cmuo.mutation.AddedUpdatedById(); ok {
		_spec.AddField(categorymain.FieldUpdatedById, field.TypeInt, value)
	}
	if value, ok := cmuo.mutation.CreatedById(); ok {
		_spec.SetField(categorymain.FieldCreatedById, field.TypeInt, value)
	}
	if value, ok := cmuo.mutation.AddedCreatedById(); ok {
		_spec.AddField(categorymain.FieldCreatedById, field.TypeInt, value)
	}
	_node = &CategoryMain{config: cmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{categorymain.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cmuo.mutation.done = true
	return _node, nil
}
