// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"datacatAgent/ent/categorysub"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CategorySubCreate is the builder for creating a CategorySub entity.
type CategorySubCreate struct {
	config
	mutation *CategorySubMutation
	hooks    []Hook
}

// SetProgram sets the "program" field.
func (csc *CategorySubCreate) SetProgram(s string) *CategorySubCreate {
	csc.mutation.SetProgram(s)
	return csc
}

// SetUpdatedAt sets the "updatedAt" field.
func (csc *CategorySubCreate) SetUpdatedAt(t time.Time) *CategorySubCreate {
	csc.mutation.SetUpdatedAt(t)
	return csc
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (csc *CategorySubCreate) SetNillableUpdatedAt(t *time.Time) *CategorySubCreate {
	if t != nil {
		csc.SetUpdatedAt(*t)
	}
	return csc
}

// SetCreatedAt sets the "createdAt" field.
func (csc *CategorySubCreate) SetCreatedAt(t time.Time) *CategorySubCreate {
	csc.mutation.SetCreatedAt(t)
	return csc
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (csc *CategorySubCreate) SetNillableCreatedAt(t *time.Time) *CategorySubCreate {
	if t != nil {
		csc.SetCreatedAt(*t)
	}
	return csc
}

// SetName sets the "name" field.
func (csc *CategorySubCreate) SetName(s string) *CategorySubCreate {
	csc.mutation.SetName(s)
	return csc
}

// SetUpdatedById sets the "updatedById" field.
func (csc *CategorySubCreate) SetUpdatedById(i int) *CategorySubCreate {
	csc.mutation.SetUpdatedById(i)
	return csc
}

// SetCreatedById sets the "createdById" field.
func (csc *CategorySubCreate) SetCreatedById(i int) *CategorySubCreate {
	csc.mutation.SetCreatedById(i)
	return csc
}

// SetCategoryMainId sets the "categoryMainId" field.
func (csc *CategorySubCreate) SetCategoryMainId(i int32) *CategorySubCreate {
	csc.mutation.SetCategoryMainId(i)
	return csc
}

// SetID sets the "id" field.
func (csc *CategorySubCreate) SetID(i int32) *CategorySubCreate {
	csc.mutation.SetID(i)
	return csc
}

// Mutation returns the CategorySubMutation object of the builder.
func (csc *CategorySubCreate) Mutation() *CategorySubMutation {
	return csc.mutation
}

// Save creates the CategorySub in the database.
func (csc *CategorySubCreate) Save(ctx context.Context) (*CategorySub, error) {
	csc.defaults()
	return withHooks(ctx, csc.sqlSave, csc.mutation, csc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (csc *CategorySubCreate) SaveX(ctx context.Context) *CategorySub {
	v, err := csc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (csc *CategorySubCreate) Exec(ctx context.Context) error {
	_, err := csc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csc *CategorySubCreate) ExecX(ctx context.Context) {
	if err := csc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (csc *CategorySubCreate) defaults() {
	if _, ok := csc.mutation.UpdatedAt(); !ok {
		v := categorysub.DefaultUpdatedAt()
		csc.mutation.SetUpdatedAt(v)
	}
	if _, ok := csc.mutation.CreatedAt(); !ok {
		v := categorysub.DefaultCreatedAt()
		csc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (csc *CategorySubCreate) check() error {
	if _, ok := csc.mutation.Program(); !ok {
		return &ValidationError{Name: "program", err: errors.New(`ent: missing required field "CategorySub.program"`)}
	}
	if _, ok := csc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`ent: missing required field "CategorySub.updatedAt"`)}
	}
	if _, ok := csc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`ent: missing required field "CategorySub.createdAt"`)}
	}
	if _, ok := csc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "CategorySub.name"`)}
	}
	if _, ok := csc.mutation.UpdatedById(); !ok {
		return &ValidationError{Name: "updatedById", err: errors.New(`ent: missing required field "CategorySub.updatedById"`)}
	}
	if _, ok := csc.mutation.CreatedById(); !ok {
		return &ValidationError{Name: "createdById", err: errors.New(`ent: missing required field "CategorySub.createdById"`)}
	}
	if _, ok := csc.mutation.CategoryMainId(); !ok {
		return &ValidationError{Name: "categoryMainId", err: errors.New(`ent: missing required field "CategorySub.categoryMainId"`)}
	}
	return nil
}

func (csc *CategorySubCreate) sqlSave(ctx context.Context) (*CategorySub, error) {
	if err := csc.check(); err != nil {
		return nil, err
	}
	_node, _spec := csc.createSpec()
	if err := sqlgraph.CreateNode(ctx, csc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int32(id)
	}
	csc.mutation.id = &_node.ID
	csc.mutation.done = true
	return _node, nil
}

func (csc *CategorySubCreate) createSpec() (*CategorySub, *sqlgraph.CreateSpec) {
	var (
		_node = &CategorySub{config: csc.config}
		_spec = sqlgraph.NewCreateSpec(categorysub.Table, sqlgraph.NewFieldSpec(categorysub.FieldID, field.TypeInt32))
	)
	if id, ok := csc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := csc.mutation.Program(); ok {
		_spec.SetField(categorysub.FieldProgram, field.TypeString, value)
		_node.Program = value
	}
	if value, ok := csc.mutation.UpdatedAt(); ok {
		_spec.SetField(categorysub.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := csc.mutation.CreatedAt(); ok {
		_spec.SetField(categorysub.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := csc.mutation.Name(); ok {
		_spec.SetField(categorysub.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := csc.mutation.UpdatedById(); ok {
		_spec.SetField(categorysub.FieldUpdatedById, field.TypeInt, value)
		_node.UpdatedById = value
	}
	if value, ok := csc.mutation.CreatedById(); ok {
		_spec.SetField(categorysub.FieldCreatedById, field.TypeInt, value)
		_node.CreatedById = value
	}
	if value, ok := csc.mutation.CategoryMainId(); ok {
		_spec.SetField(categorysub.FieldCategoryMainId, field.TypeInt32, value)
		_node.CategoryMainId = value
	}
	return _node, _spec
}

// CategorySubCreateBulk is the builder for creating many CategorySub entities in bulk.
type CategorySubCreateBulk struct {
	config
	err      error
	builders []*CategorySubCreate
}

// Save creates the CategorySub entities in the database.
func (cscb *CategorySubCreateBulk) Save(ctx context.Context) ([]*CategorySub, error) {
	if cscb.err != nil {
		return nil, cscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cscb.builders))
	nodes := make([]*CategorySub, len(cscb.builders))
	mutators := make([]Mutator, len(cscb.builders))
	for i := range cscb.builders {
		func(i int, root context.Context) {
			builder := cscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CategorySubMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cscb *CategorySubCreateBulk) SaveX(ctx context.Context) []*CategorySub {
	v, err := cscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cscb *CategorySubCreateBulk) Exec(ctx context.Context) error {
	_, err := cscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cscb *CategorySubCreateBulk) ExecX(ctx context.Context) {
	if err := cscb.Exec(ctx); err != nil {
		panic(err)
	}
}
