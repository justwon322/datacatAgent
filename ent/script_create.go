// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"datacatAgent/ent/script"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ScriptCreate is the builder for creating a Script entity.
type ScriptCreate struct {
	config
	mutation *ScriptMutation
	hooks    []Hook
}

// SetProgram sets the "program" field.
func (sc *ScriptCreate) SetProgram(s string) *ScriptCreate {
	sc.mutation.SetProgram(s)
	return sc
}

// SetUpdatedAt sets the "updatedAt" field.
func (sc *ScriptCreate) SetUpdatedAt(t time.Time) *ScriptCreate {
	sc.mutation.SetUpdatedAt(t)
	return sc
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (sc *ScriptCreate) SetNillableUpdatedAt(t *time.Time) *ScriptCreate {
	if t != nil {
		sc.SetUpdatedAt(*t)
	}
	return sc
}

// SetCreatedAt sets the "createdAt" field.
func (sc *ScriptCreate) SetCreatedAt(t time.Time) *ScriptCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (sc *ScriptCreate) SetNillableCreatedAt(t *time.Time) *ScriptCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetJobId sets the "jobId" field.
func (sc *ScriptCreate) SetJobId(i int) *ScriptCreate {
	sc.mutation.SetJobId(i)
	return sc
}

// SetHostname sets the "hostname" field.
func (sc *ScriptCreate) SetHostname(s string) *ScriptCreate {
	sc.mutation.SetHostname(s)
	return sc
}

// SetCommand sets the "command" field.
func (sc *ScriptCreate) SetCommand(s string) *ScriptCreate {
	sc.mutation.SetCommand(s)
	return sc
}

// SetComment sets the "comment" field.
func (sc *ScriptCreate) SetComment(s string) *ScriptCreate {
	sc.mutation.SetComment(s)
	return sc
}

// SetUsable sets the "usable" field.
func (sc *ScriptCreate) SetUsable(i int) *ScriptCreate {
	sc.mutation.SetUsable(i)
	return sc
}

// SetRepeatInterval sets the "repeatInterval" field.
func (sc *ScriptCreate) SetRepeatInterval(i int) *ScriptCreate {
	sc.mutation.SetRepeatInterval(i)
	return sc
}

// SetUpdatedById sets the "updatedById" field.
func (sc *ScriptCreate) SetUpdatedById(i int) *ScriptCreate {
	sc.mutation.SetUpdatedById(i)
	return sc
}

// SetCreatedById sets the "createdById" field.
func (sc *ScriptCreate) SetCreatedById(i int) *ScriptCreate {
	sc.mutation.SetCreatedById(i)
	return sc
}

// SetRegionId sets the "regionId" field.
func (sc *ScriptCreate) SetRegionId(i int) *ScriptCreate {
	sc.mutation.SetRegionId(i)
	return sc
}

// SetManagerId sets the "managerId" field.
func (sc *ScriptCreate) SetManagerId(i int) *ScriptCreate {
	sc.mutation.SetManagerId(i)
	return sc
}

// SetManagerGroupId sets the "managerGroupId" field.
func (sc *ScriptCreate) SetManagerGroupId(i int) *ScriptCreate {
	sc.mutation.SetManagerGroupId(i)
	return sc
}

// SetStartTime sets the "startTime" field.
func (sc *ScriptCreate) SetStartTime(t time.Time) *ScriptCreate {
	sc.mutation.SetStartTime(t)
	return sc
}

// SetEndTime sets the "endTime" field.
func (sc *ScriptCreate) SetEndTime(t time.Time) *ScriptCreate {
	sc.mutation.SetEndTime(t)
	return sc
}

// SetID sets the "id" field.
func (sc *ScriptCreate) SetID(i int64) *ScriptCreate {
	sc.mutation.SetID(i)
	return sc
}

// Mutation returns the ScriptMutation object of the builder.
func (sc *ScriptCreate) Mutation() *ScriptMutation {
	return sc.mutation
}

// Save creates the Script in the database.
func (sc *ScriptCreate) Save(ctx context.Context) (*Script, error) {
	sc.defaults()
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *ScriptCreate) SaveX(ctx context.Context) *Script {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *ScriptCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *ScriptCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *ScriptCreate) defaults() {
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		v := script.DefaultUpdatedAt()
		sc.mutation.SetUpdatedAt(v)
	}
	if _, ok := sc.mutation.CreatedAt(); !ok {
		v := script.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *ScriptCreate) check() error {
	if _, ok := sc.mutation.Program(); !ok {
		return &ValidationError{Name: "program", err: errors.New(`ent: missing required field "Script.program"`)}
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`ent: missing required field "Script.updatedAt"`)}
	}
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`ent: missing required field "Script.createdAt"`)}
	}
	if _, ok := sc.mutation.JobId(); !ok {
		return &ValidationError{Name: "jobId", err: errors.New(`ent: missing required field "Script.jobId"`)}
	}
	if _, ok := sc.mutation.Hostname(); !ok {
		return &ValidationError{Name: "hostname", err: errors.New(`ent: missing required field "Script.hostname"`)}
	}
	if _, ok := sc.mutation.Command(); !ok {
		return &ValidationError{Name: "command", err: errors.New(`ent: missing required field "Script.command"`)}
	}
	if _, ok := sc.mutation.Comment(); !ok {
		return &ValidationError{Name: "comment", err: errors.New(`ent: missing required field "Script.comment"`)}
	}
	if _, ok := sc.mutation.Usable(); !ok {
		return &ValidationError{Name: "usable", err: errors.New(`ent: missing required field "Script.usable"`)}
	}
	if _, ok := sc.mutation.RepeatInterval(); !ok {
		return &ValidationError{Name: "repeatInterval", err: errors.New(`ent: missing required field "Script.repeatInterval"`)}
	}
	if _, ok := sc.mutation.UpdatedById(); !ok {
		return &ValidationError{Name: "updatedById", err: errors.New(`ent: missing required field "Script.updatedById"`)}
	}
	if _, ok := sc.mutation.CreatedById(); !ok {
		return &ValidationError{Name: "createdById", err: errors.New(`ent: missing required field "Script.createdById"`)}
	}
	if _, ok := sc.mutation.RegionId(); !ok {
		return &ValidationError{Name: "regionId", err: errors.New(`ent: missing required field "Script.regionId"`)}
	}
	if _, ok := sc.mutation.ManagerId(); !ok {
		return &ValidationError{Name: "managerId", err: errors.New(`ent: missing required field "Script.managerId"`)}
	}
	if _, ok := sc.mutation.ManagerGroupId(); !ok {
		return &ValidationError{Name: "managerGroupId", err: errors.New(`ent: missing required field "Script.managerGroupId"`)}
	}
	if _, ok := sc.mutation.StartTime(); !ok {
		return &ValidationError{Name: "startTime", err: errors.New(`ent: missing required field "Script.startTime"`)}
	}
	if _, ok := sc.mutation.EndTime(); !ok {
		return &ValidationError{Name: "endTime", err: errors.New(`ent: missing required field "Script.endTime"`)}
	}
	return nil
}

func (sc *ScriptCreate) sqlSave(ctx context.Context) (*Script, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *ScriptCreate) createSpec() (*Script, *sqlgraph.CreateSpec) {
	var (
		_node = &Script{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(script.Table, sqlgraph.NewFieldSpec(script.FieldID, field.TypeInt64))
	)
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.Program(); ok {
		_spec.SetField(script.FieldProgram, field.TypeString, value)
		_node.Program = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.SetField(script.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.SetField(script.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.JobId(); ok {
		_spec.SetField(script.FieldJobId, field.TypeInt, value)
		_node.JobId = value
	}
	if value, ok := sc.mutation.Hostname(); ok {
		_spec.SetField(script.FieldHostname, field.TypeString, value)
		_node.Hostname = value
	}
	if value, ok := sc.mutation.Command(); ok {
		_spec.SetField(script.FieldCommand, field.TypeString, value)
		_node.Command = value
	}
	if value, ok := sc.mutation.Comment(); ok {
		_spec.SetField(script.FieldComment, field.TypeString, value)
		_node.Comment = value
	}
	if value, ok := sc.mutation.Usable(); ok {
		_spec.SetField(script.FieldUsable, field.TypeInt, value)
		_node.Usable = value
	}
	if value, ok := sc.mutation.RepeatInterval(); ok {
		_spec.SetField(script.FieldRepeatInterval, field.TypeInt, value)
		_node.RepeatInterval = value
	}
	if value, ok := sc.mutation.UpdatedById(); ok {
		_spec.SetField(script.FieldUpdatedById, field.TypeInt, value)
		_node.UpdatedById = value
	}
	if value, ok := sc.mutation.CreatedById(); ok {
		_spec.SetField(script.FieldCreatedById, field.TypeInt, value)
		_node.CreatedById = value
	}
	if value, ok := sc.mutation.RegionId(); ok {
		_spec.SetField(script.FieldRegionId, field.TypeInt, value)
		_node.RegionId = value
	}
	if value, ok := sc.mutation.ManagerId(); ok {
		_spec.SetField(script.FieldManagerId, field.TypeInt, value)
		_node.ManagerId = value
	}
	if value, ok := sc.mutation.ManagerGroupId(); ok {
		_spec.SetField(script.FieldManagerGroupId, field.TypeInt, value)
		_node.ManagerGroupId = value
	}
	if value, ok := sc.mutation.StartTime(); ok {
		_spec.SetField(script.FieldStartTime, field.TypeTime, value)
		_node.StartTime = value
	}
	if value, ok := sc.mutation.EndTime(); ok {
		_spec.SetField(script.FieldEndTime, field.TypeTime, value)
		_node.EndTime = value
	}
	return _node, _spec
}

// ScriptCreateBulk is the builder for creating many Script entities in bulk.
type ScriptCreateBulk struct {
	config
	err      error
	builders []*ScriptCreate
}

// Save creates the Script entities in the database.
func (scb *ScriptCreateBulk) Save(ctx context.Context) ([]*Script, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Script, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ScriptMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *ScriptCreateBulk) SaveX(ctx context.Context) []*Script {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *ScriptCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *ScriptCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
