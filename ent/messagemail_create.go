// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"datacatAgent/ent/messagemail"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MessageMailCreate is the builder for creating a MessageMail entity.
type MessageMailCreate struct {
	config
	mutation *MessageMailMutation
	hooks    []Hook
}

// SetSeq sets the "seq" field.
func (mmc *MessageMailCreate) SetSeq(i int64) *MessageMailCreate {
	mmc.mutation.SetSeq(i)
	return mmc
}

// SetMailSubject sets the "mailSubject" field.
func (mmc *MessageMailCreate) SetMailSubject(s string) *MessageMailCreate {
	mmc.mutation.SetMailSubject(s)
	return mmc
}

// SetMailContents sets the "mailContents" field.
func (mmc *MessageMailCreate) SetMailContents(s string) *MessageMailCreate {
	mmc.mutation.SetMailContents(s)
	return mmc
}

// SetMailGb sets the "mailGb" field.
func (mmc *MessageMailCreate) SetMailGb(i int) *MessageMailCreate {
	mmc.mutation.SetMailGb(i)
	return mmc
}

// SetMailRecvGroup sets the "mailRecvGroup" field.
func (mmc *MessageMailCreate) SetMailRecvGroup(s string) *MessageMailCreate {
	mmc.mutation.SetMailRecvGroup(s)
	return mmc
}

// SetSent sets the "sent" field.
func (mmc *MessageMailCreate) SetSent(i int) *MessageMailCreate {
	mmc.mutation.SetSent(i)
	return mmc
}

// SetSentAt sets the "sentAt" field.
func (mmc *MessageMailCreate) SetSentAt(t time.Time) *MessageMailCreate {
	mmc.mutation.SetSentAt(t)
	return mmc
}

// SetNillableSentAt sets the "sentAt" field if the given value is not nil.
func (mmc *MessageMailCreate) SetNillableSentAt(t *time.Time) *MessageMailCreate {
	if t != nil {
		mmc.SetSentAt(*t)
	}
	return mmc
}

// SetCreatedById sets the "createdById" field.
func (mmc *MessageMailCreate) SetCreatedById(i int) *MessageMailCreate {
	mmc.mutation.SetCreatedById(i)
	return mmc
}

// SetCreatedAt sets the "createdAt" field.
func (mmc *MessageMailCreate) SetCreatedAt(t time.Time) *MessageMailCreate {
	mmc.mutation.SetCreatedAt(t)
	return mmc
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (mmc *MessageMailCreate) SetNillableCreatedAt(t *time.Time) *MessageMailCreate {
	if t != nil {
		mmc.SetCreatedAt(*t)
	}
	return mmc
}

// SetUpdatedById sets the "updatedById" field.
func (mmc *MessageMailCreate) SetUpdatedById(i int) *MessageMailCreate {
	mmc.mutation.SetUpdatedById(i)
	return mmc
}

// SetUpdatedAt sets the "updatedAt" field.
func (mmc *MessageMailCreate) SetUpdatedAt(t time.Time) *MessageMailCreate {
	mmc.mutation.SetUpdatedAt(t)
	return mmc
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (mmc *MessageMailCreate) SetNillableUpdatedAt(t *time.Time) *MessageMailCreate {
	if t != nil {
		mmc.SetUpdatedAt(*t)
	}
	return mmc
}

// Mutation returns the MessageMailMutation object of the builder.
func (mmc *MessageMailCreate) Mutation() *MessageMailMutation {
	return mmc.mutation
}

// Save creates the MessageMail in the database.
func (mmc *MessageMailCreate) Save(ctx context.Context) (*MessageMail, error) {
	mmc.defaults()
	return withHooks(ctx, mmc.sqlSave, mmc.mutation, mmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mmc *MessageMailCreate) SaveX(ctx context.Context) *MessageMail {
	v, err := mmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mmc *MessageMailCreate) Exec(ctx context.Context) error {
	_, err := mmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mmc *MessageMailCreate) ExecX(ctx context.Context) {
	if err := mmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mmc *MessageMailCreate) defaults() {
	if _, ok := mmc.mutation.SentAt(); !ok {
		v := messagemail.DefaultSentAt()
		mmc.mutation.SetSentAt(v)
	}
	if _, ok := mmc.mutation.CreatedAt(); !ok {
		v := messagemail.DefaultCreatedAt()
		mmc.mutation.SetCreatedAt(v)
	}
	if _, ok := mmc.mutation.UpdatedAt(); !ok {
		v := messagemail.DefaultUpdatedAt()
		mmc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mmc *MessageMailCreate) check() error {
	if _, ok := mmc.mutation.Seq(); !ok {
		return &ValidationError{Name: "seq", err: errors.New(`ent: missing required field "MessageMail.seq"`)}
	}
	if _, ok := mmc.mutation.MailSubject(); !ok {
		return &ValidationError{Name: "mailSubject", err: errors.New(`ent: missing required field "MessageMail.mailSubject"`)}
	}
	if _, ok := mmc.mutation.MailContents(); !ok {
		return &ValidationError{Name: "mailContents", err: errors.New(`ent: missing required field "MessageMail.mailContents"`)}
	}
	if _, ok := mmc.mutation.MailGb(); !ok {
		return &ValidationError{Name: "mailGb", err: errors.New(`ent: missing required field "MessageMail.mailGb"`)}
	}
	if _, ok := mmc.mutation.MailRecvGroup(); !ok {
		return &ValidationError{Name: "mailRecvGroup", err: errors.New(`ent: missing required field "MessageMail.mailRecvGroup"`)}
	}
	if _, ok := mmc.mutation.Sent(); !ok {
		return &ValidationError{Name: "sent", err: errors.New(`ent: missing required field "MessageMail.sent"`)}
	}
	if _, ok := mmc.mutation.SentAt(); !ok {
		return &ValidationError{Name: "sentAt", err: errors.New(`ent: missing required field "MessageMail.sentAt"`)}
	}
	if _, ok := mmc.mutation.CreatedById(); !ok {
		return &ValidationError{Name: "createdById", err: errors.New(`ent: missing required field "MessageMail.createdById"`)}
	}
	if _, ok := mmc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`ent: missing required field "MessageMail.createdAt"`)}
	}
	if _, ok := mmc.mutation.UpdatedById(); !ok {
		return &ValidationError{Name: "updatedById", err: errors.New(`ent: missing required field "MessageMail.updatedById"`)}
	}
	if _, ok := mmc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`ent: missing required field "MessageMail.updatedAt"`)}
	}
	return nil
}

func (mmc *MessageMailCreate) sqlSave(ctx context.Context) (*MessageMail, error) {
	if err := mmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	mmc.mutation.id = &_node.ID
	mmc.mutation.done = true
	return _node, nil
}

func (mmc *MessageMailCreate) createSpec() (*MessageMail, *sqlgraph.CreateSpec) {
	var (
		_node = &MessageMail{config: mmc.config}
		_spec = sqlgraph.NewCreateSpec(messagemail.Table, sqlgraph.NewFieldSpec(messagemail.FieldID, field.TypeInt))
	)
	if value, ok := mmc.mutation.Seq(); ok {
		_spec.SetField(messagemail.FieldSeq, field.TypeInt64, value)
		_node.Seq = value
	}
	if value, ok := mmc.mutation.MailSubject(); ok {
		_spec.SetField(messagemail.FieldMailSubject, field.TypeString, value)
		_node.MailSubject = value
	}
	if value, ok := mmc.mutation.MailContents(); ok {
		_spec.SetField(messagemail.FieldMailContents, field.TypeString, value)
		_node.MailContents = value
	}
	if value, ok := mmc.mutation.MailGb(); ok {
		_spec.SetField(messagemail.FieldMailGb, field.TypeInt, value)
		_node.MailGb = value
	}
	if value, ok := mmc.mutation.MailRecvGroup(); ok {
		_spec.SetField(messagemail.FieldMailRecvGroup, field.TypeString, value)
		_node.MailRecvGroup = value
	}
	if value, ok := mmc.mutation.Sent(); ok {
		_spec.SetField(messagemail.FieldSent, field.TypeInt, value)
		_node.Sent = value
	}
	if value, ok := mmc.mutation.SentAt(); ok {
		_spec.SetField(messagemail.FieldSentAt, field.TypeTime, value)
		_node.SentAt = value
	}
	if value, ok := mmc.mutation.CreatedById(); ok {
		_spec.SetField(messagemail.FieldCreatedById, field.TypeInt, value)
		_node.CreatedById = value
	}
	if value, ok := mmc.mutation.CreatedAt(); ok {
		_spec.SetField(messagemail.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := mmc.mutation.UpdatedById(); ok {
		_spec.SetField(messagemail.FieldUpdatedById, field.TypeInt, value)
		_node.UpdatedById = value
	}
	if value, ok := mmc.mutation.UpdatedAt(); ok {
		_spec.SetField(messagemail.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// MessageMailCreateBulk is the builder for creating many MessageMail entities in bulk.
type MessageMailCreateBulk struct {
	config
	err      error
	builders []*MessageMailCreate
}

// Save creates the MessageMail entities in the database.
func (mmcb *MessageMailCreateBulk) Save(ctx context.Context) ([]*MessageMail, error) {
	if mmcb.err != nil {
		return nil, mmcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mmcb.builders))
	nodes := make([]*MessageMail, len(mmcb.builders))
	mutators := make([]Mutator, len(mmcb.builders))
	for i := range mmcb.builders {
		func(i int, root context.Context) {
			builder := mmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MessageMailMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mmcb *MessageMailCreateBulk) SaveX(ctx context.Context) []*MessageMail {
	v, err := mmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mmcb *MessageMailCreateBulk) Exec(ctx context.Context) error {
	_, err := mmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mmcb *MessageMailCreateBulk) ExecX(ctx context.Context) {
	if err := mmcb.Exec(ctx); err != nil {
		panic(err)
	}
}
