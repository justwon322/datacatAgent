// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"datacatAgent/ent/categorymain"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CategoryMainCreate is the builder for creating a CategoryMain entity.
type CategoryMainCreate struct {
	config
	mutation *CategoryMainMutation
	hooks    []Hook
}

// SetProgram sets the "program" field.
func (cmc *CategoryMainCreate) SetProgram(s string) *CategoryMainCreate {
	cmc.mutation.SetProgram(s)
	return cmc
}

// SetUpdatedAt sets the "updatedAt" field.
func (cmc *CategoryMainCreate) SetUpdatedAt(t time.Time) *CategoryMainCreate {
	cmc.mutation.SetUpdatedAt(t)
	return cmc
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (cmc *CategoryMainCreate) SetNillableUpdatedAt(t *time.Time) *CategoryMainCreate {
	if t != nil {
		cmc.SetUpdatedAt(*t)
	}
	return cmc
}

// SetCreatedAt sets the "createdAt" field.
func (cmc *CategoryMainCreate) SetCreatedAt(t time.Time) *CategoryMainCreate {
	cmc.mutation.SetCreatedAt(t)
	return cmc
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (cmc *CategoryMainCreate) SetNillableCreatedAt(t *time.Time) *CategoryMainCreate {
	if t != nil {
		cmc.SetCreatedAt(*t)
	}
	return cmc
}

// SetName sets the "name" field.
func (cmc *CategoryMainCreate) SetName(s string) *CategoryMainCreate {
	cmc.mutation.SetName(s)
	return cmc
}

// SetPriority sets the "priority" field.
func (cmc *CategoryMainCreate) SetPriority(i int) *CategoryMainCreate {
	cmc.mutation.SetPriority(i)
	return cmc
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (cmc *CategoryMainCreate) SetNillablePriority(i *int) *CategoryMainCreate {
	if i != nil {
		cmc.SetPriority(*i)
	}
	return cmc
}

// SetUpdatedById sets the "updatedById" field.
func (cmc *CategoryMainCreate) SetUpdatedById(i int) *CategoryMainCreate {
	cmc.mutation.SetUpdatedById(i)
	return cmc
}

// SetNillableUpdatedById sets the "updatedById" field if the given value is not nil.
func (cmc *CategoryMainCreate) SetNillableUpdatedById(i *int) *CategoryMainCreate {
	if i != nil {
		cmc.SetUpdatedById(*i)
	}
	return cmc
}

// SetCreatedById sets the "createdById" field.
func (cmc *CategoryMainCreate) SetCreatedById(i int) *CategoryMainCreate {
	cmc.mutation.SetCreatedById(i)
	return cmc
}

// SetNillableCreatedById sets the "createdById" field if the given value is not nil.
func (cmc *CategoryMainCreate) SetNillableCreatedById(i *int) *CategoryMainCreate {
	if i != nil {
		cmc.SetCreatedById(*i)
	}
	return cmc
}

// SetID sets the "id" field.
func (cmc *CategoryMainCreate) SetID(i int32) *CategoryMainCreate {
	cmc.mutation.SetID(i)
	return cmc
}

// Mutation returns the CategoryMainMutation object of the builder.
func (cmc *CategoryMainCreate) Mutation() *CategoryMainMutation {
	return cmc.mutation
}

// Save creates the CategoryMain in the database.
func (cmc *CategoryMainCreate) Save(ctx context.Context) (*CategoryMain, error) {
	cmc.defaults()
	return withHooks(ctx, cmc.sqlSave, cmc.mutation, cmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cmc *CategoryMainCreate) SaveX(ctx context.Context) *CategoryMain {
	v, err := cmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cmc *CategoryMainCreate) Exec(ctx context.Context) error {
	_, err := cmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmc *CategoryMainCreate) ExecX(ctx context.Context) {
	if err := cmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cmc *CategoryMainCreate) defaults() {
	if _, ok := cmc.mutation.UpdatedAt(); !ok {
		v := categorymain.DefaultUpdatedAt()
		cmc.mutation.SetUpdatedAt(v)
	}
	if _, ok := cmc.mutation.CreatedAt(); !ok {
		v := categorymain.DefaultCreatedAt()
		cmc.mutation.SetCreatedAt(v)
	}
	if _, ok := cmc.mutation.Priority(); !ok {
		v := categorymain.DefaultPriority
		cmc.mutation.SetPriority(v)
	}
	if _, ok := cmc.mutation.UpdatedById(); !ok {
		v := categorymain.DefaultUpdatedById
		cmc.mutation.SetUpdatedById(v)
	}
	if _, ok := cmc.mutation.CreatedById(); !ok {
		v := categorymain.DefaultCreatedById
		cmc.mutation.SetCreatedById(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cmc *CategoryMainCreate) check() error {
	if _, ok := cmc.mutation.Program(); !ok {
		return &ValidationError{Name: "program", err: errors.New(`ent: missing required field "CategoryMain.program"`)}
	}
	if _, ok := cmc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`ent: missing required field "CategoryMain.updatedAt"`)}
	}
	if _, ok := cmc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`ent: missing required field "CategoryMain.createdAt"`)}
	}
	if _, ok := cmc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "CategoryMain.name"`)}
	}
	if _, ok := cmc.mutation.Priority(); !ok {
		return &ValidationError{Name: "priority", err: errors.New(`ent: missing required field "CategoryMain.priority"`)}
	}
	if _, ok := cmc.mutation.UpdatedById(); !ok {
		return &ValidationError{Name: "updatedById", err: errors.New(`ent: missing required field "CategoryMain.updatedById"`)}
	}
	if _, ok := cmc.mutation.CreatedById(); !ok {
		return &ValidationError{Name: "createdById", err: errors.New(`ent: missing required field "CategoryMain.createdById"`)}
	}
	return nil
}

func (cmc *CategoryMainCreate) sqlSave(ctx context.Context) (*CategoryMain, error) {
	if err := cmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int32(id)
	}
	cmc.mutation.id = &_node.ID
	cmc.mutation.done = true
	return _node, nil
}

func (cmc *CategoryMainCreate) createSpec() (*CategoryMain, *sqlgraph.CreateSpec) {
	var (
		_node = &CategoryMain{config: cmc.config}
		_spec = sqlgraph.NewCreateSpec(categorymain.Table, sqlgraph.NewFieldSpec(categorymain.FieldID, field.TypeInt32))
	)
	if id, ok := cmc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cmc.mutation.Program(); ok {
		_spec.SetField(categorymain.FieldProgram, field.TypeString, value)
		_node.Program = value
	}
	if value, ok := cmc.mutation.UpdatedAt(); ok {
		_spec.SetField(categorymain.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cmc.mutation.CreatedAt(); ok {
		_spec.SetField(categorymain.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cmc.mutation.Name(); ok {
		_spec.SetField(categorymain.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cmc.mutation.Priority(); ok {
		_spec.SetField(categorymain.FieldPriority, field.TypeInt, value)
		_node.Priority = value
	}
	if value, ok := cmc.mutation.UpdatedById(); ok {
		_spec.SetField(categorymain.FieldUpdatedById, field.TypeInt, value)
		_node.UpdatedById = value
	}
	if value, ok := cmc.mutation.CreatedById(); ok {
		_spec.SetField(categorymain.FieldCreatedById, field.TypeInt, value)
		_node.CreatedById = value
	}
	return _node, _spec
}

// CategoryMainCreateBulk is the builder for creating many CategoryMain entities in bulk.
type CategoryMainCreateBulk struct {
	config
	err      error
	builders []*CategoryMainCreate
}

// Save creates the CategoryMain entities in the database.
func (cmcb *CategoryMainCreateBulk) Save(ctx context.Context) ([]*CategoryMain, error) {
	if cmcb.err != nil {
		return nil, cmcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cmcb.builders))
	nodes := make([]*CategoryMain, len(cmcb.builders))
	mutators := make([]Mutator, len(cmcb.builders))
	for i := range cmcb.builders {
		func(i int, root context.Context) {
			builder := cmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CategoryMainMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cmcb *CategoryMainCreateBulk) SaveX(ctx context.Context) []*CategoryMain {
	v, err := cmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cmcb *CategoryMainCreateBulk) Exec(ctx context.Context) error {
	_, err := cmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmcb *CategoryMainCreateBulk) ExecX(ctx context.Context) {
	if err := cmcb.Exec(ctx); err != nil {
		panic(err)
	}
}
