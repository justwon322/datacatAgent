// Code generated by ent, DO NOT EDIT.

package ent

import (
	"datacatAgent/ent/messagemail"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// MessageMail is the model entity for the MessageMail schema.
type MessageMail struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Seq holds the value of the "seq" field.
	Seq int64 `json:"seq,omitempty"`
	// MailSubject holds the value of the "mailSubject" field.
	MailSubject string `json:"mailSubject,omitempty"`
	// MailContents holds the value of the "mailContents" field.
	MailContents string `json:"mailContents,omitempty"`
	// MailGb holds the value of the "mailGb" field.
	MailGb int `json:"mailGb,omitempty"`
	// MailRecvGroup holds the value of the "mailRecvGroup" field.
	MailRecvGroup string `json:"mailRecvGroup,omitempty"`
	// Sent holds the value of the "sent" field.
	Sent int `json:"sent,omitempty"`
	// SentAt holds the value of the "sentAt" field.
	SentAt time.Time `json:"sentAt,omitempty"`
	// CreatedById holds the value of the "createdById" field.
	CreatedById int `json:"createdById,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedById holds the value of the "updatedById" field.
	UpdatedById int `json:"updatedById,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt    time.Time `json:"updatedAt,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MessageMail) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case messagemail.FieldID, messagemail.FieldSeq, messagemail.FieldMailGb, messagemail.FieldSent, messagemail.FieldCreatedById, messagemail.FieldUpdatedById:
			values[i] = new(sql.NullInt64)
		case messagemail.FieldMailSubject, messagemail.FieldMailContents, messagemail.FieldMailRecvGroup:
			values[i] = new(sql.NullString)
		case messagemail.FieldSentAt, messagemail.FieldCreatedAt, messagemail.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MessageMail fields.
func (mm *MessageMail) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case messagemail.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			mm.ID = int(value.Int64)
		case messagemail.FieldSeq:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field seq", values[i])
			} else if value.Valid {
				mm.Seq = value.Int64
			}
		case messagemail.FieldMailSubject:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mailSubject", values[i])
			} else if value.Valid {
				mm.MailSubject = value.String
			}
		case messagemail.FieldMailContents:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mailContents", values[i])
			} else if value.Valid {
				mm.MailContents = value.String
			}
		case messagemail.FieldMailGb:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field mailGb", values[i])
			} else if value.Valid {
				mm.MailGb = int(value.Int64)
			}
		case messagemail.FieldMailRecvGroup:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mailRecvGroup", values[i])
			} else if value.Valid {
				mm.MailRecvGroup = value.String
			}
		case messagemail.FieldSent:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sent", values[i])
			} else if value.Valid {
				mm.Sent = int(value.Int64)
			}
		case messagemail.FieldSentAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field sentAt", values[i])
			} else if value.Valid {
				mm.SentAt = value.Time
			}
		case messagemail.FieldCreatedById:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field createdById", values[i])
			} else if value.Valid {
				mm.CreatedById = int(value.Int64)
			}
		case messagemail.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				mm.CreatedAt = value.Time
			}
		case messagemail.FieldUpdatedById:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updatedById", values[i])
			} else if value.Valid {
				mm.UpdatedById = int(value.Int64)
			}
		case messagemail.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				mm.UpdatedAt = value.Time
			}
		default:
			mm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the MessageMail.
// This includes values selected through modifiers, order, etc.
func (mm *MessageMail) Value(name string) (ent.Value, error) {
	return mm.selectValues.Get(name)
}

// Update returns a builder for updating this MessageMail.
// Note that you need to call MessageMail.Unwrap() before calling this method if this MessageMail
// was returned from a transaction, and the transaction was committed or rolled back.
func (mm *MessageMail) Update() *MessageMailUpdateOne {
	return NewMessageMailClient(mm.config).UpdateOne(mm)
}

// Unwrap unwraps the MessageMail entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mm *MessageMail) Unwrap() *MessageMail {
	_tx, ok := mm.config.driver.(*txDriver)
	if !ok {
		panic("ent: MessageMail is not a transactional entity")
	}
	mm.config.driver = _tx.drv
	return mm
}

// String implements the fmt.Stringer.
func (mm *MessageMail) String() string {
	var builder strings.Builder
	builder.WriteString("MessageMail(")
	builder.WriteString(fmt.Sprintf("id=%v, ", mm.ID))
	builder.WriteString("seq=")
	builder.WriteString(fmt.Sprintf("%v", mm.Seq))
	builder.WriteString(", ")
	builder.WriteString("mailSubject=")
	builder.WriteString(mm.MailSubject)
	builder.WriteString(", ")
	builder.WriteString("mailContents=")
	builder.WriteString(mm.MailContents)
	builder.WriteString(", ")
	builder.WriteString("mailGb=")
	builder.WriteString(fmt.Sprintf("%v", mm.MailGb))
	builder.WriteString(", ")
	builder.WriteString("mailRecvGroup=")
	builder.WriteString(mm.MailRecvGroup)
	builder.WriteString(", ")
	builder.WriteString("sent=")
	builder.WriteString(fmt.Sprintf("%v", mm.Sent))
	builder.WriteString(", ")
	builder.WriteString("sentAt=")
	builder.WriteString(mm.SentAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("createdById=")
	builder.WriteString(fmt.Sprintf("%v", mm.CreatedById))
	builder.WriteString(", ")
	builder.WriteString("createdAt=")
	builder.WriteString(mm.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updatedById=")
	builder.WriteString(fmt.Sprintf("%v", mm.UpdatedById))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(mm.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// MessageMails is a parsable slice of MessageMail.
type MessageMails []*MessageMail
