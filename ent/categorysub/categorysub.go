// Code generated by ent, DO NOT EDIT.

package categorysub

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the categorysub type in the database.
	Label = "category_sub"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldProgram holds the string denoting the program field in the database.
	FieldProgram = "program"
	// FieldUpdatedAt holds the string denoting the updatedat field in the database.
	FieldUpdatedAt = "updatedAt"
	// FieldCreatedAt holds the string denoting the createdat field in the database.
	FieldCreatedAt = "createdAt"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldUpdatedById holds the string denoting the updatedbyid field in the database.
	FieldUpdatedById = "updatedById"
	// FieldCreatedById holds the string denoting the createdbyid field in the database.
	FieldCreatedById = "createdById"
	// FieldCategoryMainId holds the string denoting the categorymainid field in the database.
	FieldCategoryMainId = "categoryMainId"
	// Table holds the table name of the categorysub in the database.
	Table = "category_sub"
)

// Columns holds all SQL columns for categorysub fields.
var Columns = []string{
	FieldID,
	FieldProgram,
	FieldUpdatedAt,
	FieldCreatedAt,
	FieldName,
	FieldUpdatedById,
	FieldCreatedById,
	FieldCategoryMainId,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultUpdatedAt holds the default value on creation for the "updatedAt" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updatedAt" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultCreatedAt holds the default value on creation for the "createdAt" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the CategorySub queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByProgram orders the results by the program field.
func ByProgram(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProgram, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updatedAt field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedAt orders the results by the createdAt field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByUpdatedById orders the results by the updatedById field.
func ByUpdatedById(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedById, opts...).ToFunc()
}

// ByCreatedById orders the results by the createdById field.
func ByCreatedById(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedById, opts...).ToFunc()
}

// ByCategoryMainId orders the results by the categoryMainId field.
func ByCategoryMainId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCategoryMainId, opts...).ToFunc()
}
