// Code generated by ent, DO NOT EDIT.

package script

import (
	"datacatAgent/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Script {
	return predicate.Script(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Script {
	return predicate.Script(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Script {
	return predicate.Script(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Script {
	return predicate.Script(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Script {
	return predicate.Script(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Script {
	return predicate.Script(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Script {
	return predicate.Script(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Script {
	return predicate.Script(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Script {
	return predicate.Script(sql.FieldLTE(FieldID, id))
}

// Program applies equality check predicate on the "program" field. It's identical to ProgramEQ.
func Program(v string) predicate.Script {
	return predicate.Script(sql.FieldEQ(FieldProgram, v))
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Script {
	return predicate.Script(sql.FieldEQ(FieldUpdatedAt, v))
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Script {
	return predicate.Script(sql.FieldEQ(FieldCreatedAt, v))
}

// JobId applies equality check predicate on the "jobId" field. It's identical to JobIdEQ.
func JobId(v int) predicate.Script {
	return predicate.Script(sql.FieldEQ(FieldJobId, v))
}

// Hostname applies equality check predicate on the "hostname" field. It's identical to HostnameEQ.
func Hostname(v string) predicate.Script {
	return predicate.Script(sql.FieldEQ(FieldHostname, v))
}

// Command applies equality check predicate on the "command" field. It's identical to CommandEQ.
func Command(v string) predicate.Script {
	return predicate.Script(sql.FieldEQ(FieldCommand, v))
}

// Comment applies equality check predicate on the "comment" field. It's identical to CommentEQ.
func Comment(v string) predicate.Script {
	return predicate.Script(sql.FieldEQ(FieldComment, v))
}

// Usable applies equality check predicate on the "usable" field. It's identical to UsableEQ.
func Usable(v int) predicate.Script {
	return predicate.Script(sql.FieldEQ(FieldUsable, v))
}

// RepeatInterval applies equality check predicate on the "repeatInterval" field. It's identical to RepeatIntervalEQ.
func RepeatInterval(v int) predicate.Script {
	return predicate.Script(sql.FieldEQ(FieldRepeatInterval, v))
}

// UpdatedById applies equality check predicate on the "updatedById" field. It's identical to UpdatedByIdEQ.
func UpdatedById(v int) predicate.Script {
	return predicate.Script(sql.FieldEQ(FieldUpdatedById, v))
}

// CreatedById applies equality check predicate on the "createdById" field. It's identical to CreatedByIdEQ.
func CreatedById(v int) predicate.Script {
	return predicate.Script(sql.FieldEQ(FieldCreatedById, v))
}

// RegionId applies equality check predicate on the "regionId" field. It's identical to RegionIdEQ.
func RegionId(v int) predicate.Script {
	return predicate.Script(sql.FieldEQ(FieldRegionId, v))
}

// ManagerId applies equality check predicate on the "managerId" field. It's identical to ManagerIdEQ.
func ManagerId(v int) predicate.Script {
	return predicate.Script(sql.FieldEQ(FieldManagerId, v))
}

// ManagerGroupId applies equality check predicate on the "managerGroupId" field. It's identical to ManagerGroupIdEQ.
func ManagerGroupId(v int) predicate.Script {
	return predicate.Script(sql.FieldEQ(FieldManagerGroupId, v))
}

// StartTime applies equality check predicate on the "startTime" field. It's identical to StartTimeEQ.
func StartTime(v time.Time) predicate.Script {
	return predicate.Script(sql.FieldEQ(FieldStartTime, v))
}

// EndTime applies equality check predicate on the "endTime" field. It's identical to EndTimeEQ.
func EndTime(v time.Time) predicate.Script {
	return predicate.Script(sql.FieldEQ(FieldEndTime, v))
}

// ProgramEQ applies the EQ predicate on the "program" field.
func ProgramEQ(v string) predicate.Script {
	return predicate.Script(sql.FieldEQ(FieldProgram, v))
}

// ProgramNEQ applies the NEQ predicate on the "program" field.
func ProgramNEQ(v string) predicate.Script {
	return predicate.Script(sql.FieldNEQ(FieldProgram, v))
}

// ProgramIn applies the In predicate on the "program" field.
func ProgramIn(vs ...string) predicate.Script {
	return predicate.Script(sql.FieldIn(FieldProgram, vs...))
}

// ProgramNotIn applies the NotIn predicate on the "program" field.
func ProgramNotIn(vs ...string) predicate.Script {
	return predicate.Script(sql.FieldNotIn(FieldProgram, vs...))
}

// ProgramGT applies the GT predicate on the "program" field.
func ProgramGT(v string) predicate.Script {
	return predicate.Script(sql.FieldGT(FieldProgram, v))
}

// ProgramGTE applies the GTE predicate on the "program" field.
func ProgramGTE(v string) predicate.Script {
	return predicate.Script(sql.FieldGTE(FieldProgram, v))
}

// ProgramLT applies the LT predicate on the "program" field.
func ProgramLT(v string) predicate.Script {
	return predicate.Script(sql.FieldLT(FieldProgram, v))
}

// ProgramLTE applies the LTE predicate on the "program" field.
func ProgramLTE(v string) predicate.Script {
	return predicate.Script(sql.FieldLTE(FieldProgram, v))
}

// ProgramContains applies the Contains predicate on the "program" field.
func ProgramContains(v string) predicate.Script {
	return predicate.Script(sql.FieldContains(FieldProgram, v))
}

// ProgramHasPrefix applies the HasPrefix predicate on the "program" field.
func ProgramHasPrefix(v string) predicate.Script {
	return predicate.Script(sql.FieldHasPrefix(FieldProgram, v))
}

// ProgramHasSuffix applies the HasSuffix predicate on the "program" field.
func ProgramHasSuffix(v string) predicate.Script {
	return predicate.Script(sql.FieldHasSuffix(FieldProgram, v))
}

// ProgramEqualFold applies the EqualFold predicate on the "program" field.
func ProgramEqualFold(v string) predicate.Script {
	return predicate.Script(sql.FieldEqualFold(FieldProgram, v))
}

// ProgramContainsFold applies the ContainsFold predicate on the "program" field.
func ProgramContainsFold(v string) predicate.Script {
	return predicate.Script(sql.FieldContainsFold(FieldProgram, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.Script {
	return predicate.Script(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.Script {
	return predicate.Script(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.Script {
	return predicate.Script(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Script {
	return predicate.Script(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v time.Time) predicate.Script {
	return predicate.Script(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.Script {
	return predicate.Script(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v time.Time) predicate.Script {
	return predicate.Script(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.Script {
	return predicate.Script(sql.FieldLTE(FieldUpdatedAt, v))
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v time.Time) predicate.Script {
	return predicate.Script(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v time.Time) predicate.Script {
	return predicate.Script(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...time.Time) predicate.Script {
	return predicate.Script(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Script {
	return predicate.Script(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v time.Time) predicate.Script {
	return predicate.Script(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v time.Time) predicate.Script {
	return predicate.Script(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v time.Time) predicate.Script {
	return predicate.Script(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v time.Time) predicate.Script {
	return predicate.Script(sql.FieldLTE(FieldCreatedAt, v))
}

// JobIdEQ applies the EQ predicate on the "jobId" field.
func JobIdEQ(v int) predicate.Script {
	return predicate.Script(sql.FieldEQ(FieldJobId, v))
}

// JobIdNEQ applies the NEQ predicate on the "jobId" field.
func JobIdNEQ(v int) predicate.Script {
	return predicate.Script(sql.FieldNEQ(FieldJobId, v))
}

// JobIdIn applies the In predicate on the "jobId" field.
func JobIdIn(vs ...int) predicate.Script {
	return predicate.Script(sql.FieldIn(FieldJobId, vs...))
}

// JobIdNotIn applies the NotIn predicate on the "jobId" field.
func JobIdNotIn(vs ...int) predicate.Script {
	return predicate.Script(sql.FieldNotIn(FieldJobId, vs...))
}

// JobIdGT applies the GT predicate on the "jobId" field.
func JobIdGT(v int) predicate.Script {
	return predicate.Script(sql.FieldGT(FieldJobId, v))
}

// JobIdGTE applies the GTE predicate on the "jobId" field.
func JobIdGTE(v int) predicate.Script {
	return predicate.Script(sql.FieldGTE(FieldJobId, v))
}

// JobIdLT applies the LT predicate on the "jobId" field.
func JobIdLT(v int) predicate.Script {
	return predicate.Script(sql.FieldLT(FieldJobId, v))
}

// JobIdLTE applies the LTE predicate on the "jobId" field.
func JobIdLTE(v int) predicate.Script {
	return predicate.Script(sql.FieldLTE(FieldJobId, v))
}

// HostnameEQ applies the EQ predicate on the "hostname" field.
func HostnameEQ(v string) predicate.Script {
	return predicate.Script(sql.FieldEQ(FieldHostname, v))
}

// HostnameNEQ applies the NEQ predicate on the "hostname" field.
func HostnameNEQ(v string) predicate.Script {
	return predicate.Script(sql.FieldNEQ(FieldHostname, v))
}

// HostnameIn applies the In predicate on the "hostname" field.
func HostnameIn(vs ...string) predicate.Script {
	return predicate.Script(sql.FieldIn(FieldHostname, vs...))
}

// HostnameNotIn applies the NotIn predicate on the "hostname" field.
func HostnameNotIn(vs ...string) predicate.Script {
	return predicate.Script(sql.FieldNotIn(FieldHostname, vs...))
}

// HostnameGT applies the GT predicate on the "hostname" field.
func HostnameGT(v string) predicate.Script {
	return predicate.Script(sql.FieldGT(FieldHostname, v))
}

// HostnameGTE applies the GTE predicate on the "hostname" field.
func HostnameGTE(v string) predicate.Script {
	return predicate.Script(sql.FieldGTE(FieldHostname, v))
}

// HostnameLT applies the LT predicate on the "hostname" field.
func HostnameLT(v string) predicate.Script {
	return predicate.Script(sql.FieldLT(FieldHostname, v))
}

// HostnameLTE applies the LTE predicate on the "hostname" field.
func HostnameLTE(v string) predicate.Script {
	return predicate.Script(sql.FieldLTE(FieldHostname, v))
}

// HostnameContains applies the Contains predicate on the "hostname" field.
func HostnameContains(v string) predicate.Script {
	return predicate.Script(sql.FieldContains(FieldHostname, v))
}

// HostnameHasPrefix applies the HasPrefix predicate on the "hostname" field.
func HostnameHasPrefix(v string) predicate.Script {
	return predicate.Script(sql.FieldHasPrefix(FieldHostname, v))
}

// HostnameHasSuffix applies the HasSuffix predicate on the "hostname" field.
func HostnameHasSuffix(v string) predicate.Script {
	return predicate.Script(sql.FieldHasSuffix(FieldHostname, v))
}

// HostnameEqualFold applies the EqualFold predicate on the "hostname" field.
func HostnameEqualFold(v string) predicate.Script {
	return predicate.Script(sql.FieldEqualFold(FieldHostname, v))
}

// HostnameContainsFold applies the ContainsFold predicate on the "hostname" field.
func HostnameContainsFold(v string) predicate.Script {
	return predicate.Script(sql.FieldContainsFold(FieldHostname, v))
}

// CommandEQ applies the EQ predicate on the "command" field.
func CommandEQ(v string) predicate.Script {
	return predicate.Script(sql.FieldEQ(FieldCommand, v))
}

// CommandNEQ applies the NEQ predicate on the "command" field.
func CommandNEQ(v string) predicate.Script {
	return predicate.Script(sql.FieldNEQ(FieldCommand, v))
}

// CommandIn applies the In predicate on the "command" field.
func CommandIn(vs ...string) predicate.Script {
	return predicate.Script(sql.FieldIn(FieldCommand, vs...))
}

// CommandNotIn applies the NotIn predicate on the "command" field.
func CommandNotIn(vs ...string) predicate.Script {
	return predicate.Script(sql.FieldNotIn(FieldCommand, vs...))
}

// CommandGT applies the GT predicate on the "command" field.
func CommandGT(v string) predicate.Script {
	return predicate.Script(sql.FieldGT(FieldCommand, v))
}

// CommandGTE applies the GTE predicate on the "command" field.
func CommandGTE(v string) predicate.Script {
	return predicate.Script(sql.FieldGTE(FieldCommand, v))
}

// CommandLT applies the LT predicate on the "command" field.
func CommandLT(v string) predicate.Script {
	return predicate.Script(sql.FieldLT(FieldCommand, v))
}

// CommandLTE applies the LTE predicate on the "command" field.
func CommandLTE(v string) predicate.Script {
	return predicate.Script(sql.FieldLTE(FieldCommand, v))
}

// CommandContains applies the Contains predicate on the "command" field.
func CommandContains(v string) predicate.Script {
	return predicate.Script(sql.FieldContains(FieldCommand, v))
}

// CommandHasPrefix applies the HasPrefix predicate on the "command" field.
func CommandHasPrefix(v string) predicate.Script {
	return predicate.Script(sql.FieldHasPrefix(FieldCommand, v))
}

// CommandHasSuffix applies the HasSuffix predicate on the "command" field.
func CommandHasSuffix(v string) predicate.Script {
	return predicate.Script(sql.FieldHasSuffix(FieldCommand, v))
}

// CommandEqualFold applies the EqualFold predicate on the "command" field.
func CommandEqualFold(v string) predicate.Script {
	return predicate.Script(sql.FieldEqualFold(FieldCommand, v))
}

// CommandContainsFold applies the ContainsFold predicate on the "command" field.
func CommandContainsFold(v string) predicate.Script {
	return predicate.Script(sql.FieldContainsFold(FieldCommand, v))
}

// CommentEQ applies the EQ predicate on the "comment" field.
func CommentEQ(v string) predicate.Script {
	return predicate.Script(sql.FieldEQ(FieldComment, v))
}

// CommentNEQ applies the NEQ predicate on the "comment" field.
func CommentNEQ(v string) predicate.Script {
	return predicate.Script(sql.FieldNEQ(FieldComment, v))
}

// CommentIn applies the In predicate on the "comment" field.
func CommentIn(vs ...string) predicate.Script {
	return predicate.Script(sql.FieldIn(FieldComment, vs...))
}

// CommentNotIn applies the NotIn predicate on the "comment" field.
func CommentNotIn(vs ...string) predicate.Script {
	return predicate.Script(sql.FieldNotIn(FieldComment, vs...))
}

// CommentGT applies the GT predicate on the "comment" field.
func CommentGT(v string) predicate.Script {
	return predicate.Script(sql.FieldGT(FieldComment, v))
}

// CommentGTE applies the GTE predicate on the "comment" field.
func CommentGTE(v string) predicate.Script {
	return predicate.Script(sql.FieldGTE(FieldComment, v))
}

// CommentLT applies the LT predicate on the "comment" field.
func CommentLT(v string) predicate.Script {
	return predicate.Script(sql.FieldLT(FieldComment, v))
}

// CommentLTE applies the LTE predicate on the "comment" field.
func CommentLTE(v string) predicate.Script {
	return predicate.Script(sql.FieldLTE(FieldComment, v))
}

// CommentContains applies the Contains predicate on the "comment" field.
func CommentContains(v string) predicate.Script {
	return predicate.Script(sql.FieldContains(FieldComment, v))
}

// CommentHasPrefix applies the HasPrefix predicate on the "comment" field.
func CommentHasPrefix(v string) predicate.Script {
	return predicate.Script(sql.FieldHasPrefix(FieldComment, v))
}

// CommentHasSuffix applies the HasSuffix predicate on the "comment" field.
func CommentHasSuffix(v string) predicate.Script {
	return predicate.Script(sql.FieldHasSuffix(FieldComment, v))
}

// CommentEqualFold applies the EqualFold predicate on the "comment" field.
func CommentEqualFold(v string) predicate.Script {
	return predicate.Script(sql.FieldEqualFold(FieldComment, v))
}

// CommentContainsFold applies the ContainsFold predicate on the "comment" field.
func CommentContainsFold(v string) predicate.Script {
	return predicate.Script(sql.FieldContainsFold(FieldComment, v))
}

// UsableEQ applies the EQ predicate on the "usable" field.
func UsableEQ(v int) predicate.Script {
	return predicate.Script(sql.FieldEQ(FieldUsable, v))
}

// UsableNEQ applies the NEQ predicate on the "usable" field.
func UsableNEQ(v int) predicate.Script {
	return predicate.Script(sql.FieldNEQ(FieldUsable, v))
}

// UsableIn applies the In predicate on the "usable" field.
func UsableIn(vs ...int) predicate.Script {
	return predicate.Script(sql.FieldIn(FieldUsable, vs...))
}

// UsableNotIn applies the NotIn predicate on the "usable" field.
func UsableNotIn(vs ...int) predicate.Script {
	return predicate.Script(sql.FieldNotIn(FieldUsable, vs...))
}

// UsableGT applies the GT predicate on the "usable" field.
func UsableGT(v int) predicate.Script {
	return predicate.Script(sql.FieldGT(FieldUsable, v))
}

// UsableGTE applies the GTE predicate on the "usable" field.
func UsableGTE(v int) predicate.Script {
	return predicate.Script(sql.FieldGTE(FieldUsable, v))
}

// UsableLT applies the LT predicate on the "usable" field.
func UsableLT(v int) predicate.Script {
	return predicate.Script(sql.FieldLT(FieldUsable, v))
}

// UsableLTE applies the LTE predicate on the "usable" field.
func UsableLTE(v int) predicate.Script {
	return predicate.Script(sql.FieldLTE(FieldUsable, v))
}

// RepeatIntervalEQ applies the EQ predicate on the "repeatInterval" field.
func RepeatIntervalEQ(v int) predicate.Script {
	return predicate.Script(sql.FieldEQ(FieldRepeatInterval, v))
}

// RepeatIntervalNEQ applies the NEQ predicate on the "repeatInterval" field.
func RepeatIntervalNEQ(v int) predicate.Script {
	return predicate.Script(sql.FieldNEQ(FieldRepeatInterval, v))
}

// RepeatIntervalIn applies the In predicate on the "repeatInterval" field.
func RepeatIntervalIn(vs ...int) predicate.Script {
	return predicate.Script(sql.FieldIn(FieldRepeatInterval, vs...))
}

// RepeatIntervalNotIn applies the NotIn predicate on the "repeatInterval" field.
func RepeatIntervalNotIn(vs ...int) predicate.Script {
	return predicate.Script(sql.FieldNotIn(FieldRepeatInterval, vs...))
}

// RepeatIntervalGT applies the GT predicate on the "repeatInterval" field.
func RepeatIntervalGT(v int) predicate.Script {
	return predicate.Script(sql.FieldGT(FieldRepeatInterval, v))
}

// RepeatIntervalGTE applies the GTE predicate on the "repeatInterval" field.
func RepeatIntervalGTE(v int) predicate.Script {
	return predicate.Script(sql.FieldGTE(FieldRepeatInterval, v))
}

// RepeatIntervalLT applies the LT predicate on the "repeatInterval" field.
func RepeatIntervalLT(v int) predicate.Script {
	return predicate.Script(sql.FieldLT(FieldRepeatInterval, v))
}

// RepeatIntervalLTE applies the LTE predicate on the "repeatInterval" field.
func RepeatIntervalLTE(v int) predicate.Script {
	return predicate.Script(sql.FieldLTE(FieldRepeatInterval, v))
}

// UpdatedByIdEQ applies the EQ predicate on the "updatedById" field.
func UpdatedByIdEQ(v int) predicate.Script {
	return predicate.Script(sql.FieldEQ(FieldUpdatedById, v))
}

// UpdatedByIdNEQ applies the NEQ predicate on the "updatedById" field.
func UpdatedByIdNEQ(v int) predicate.Script {
	return predicate.Script(sql.FieldNEQ(FieldUpdatedById, v))
}

// UpdatedByIdIn applies the In predicate on the "updatedById" field.
func UpdatedByIdIn(vs ...int) predicate.Script {
	return predicate.Script(sql.FieldIn(FieldUpdatedById, vs...))
}

// UpdatedByIdNotIn applies the NotIn predicate on the "updatedById" field.
func UpdatedByIdNotIn(vs ...int) predicate.Script {
	return predicate.Script(sql.FieldNotIn(FieldUpdatedById, vs...))
}

// UpdatedByIdGT applies the GT predicate on the "updatedById" field.
func UpdatedByIdGT(v int) predicate.Script {
	return predicate.Script(sql.FieldGT(FieldUpdatedById, v))
}

// UpdatedByIdGTE applies the GTE predicate on the "updatedById" field.
func UpdatedByIdGTE(v int) predicate.Script {
	return predicate.Script(sql.FieldGTE(FieldUpdatedById, v))
}

// UpdatedByIdLT applies the LT predicate on the "updatedById" field.
func UpdatedByIdLT(v int) predicate.Script {
	return predicate.Script(sql.FieldLT(FieldUpdatedById, v))
}

// UpdatedByIdLTE applies the LTE predicate on the "updatedById" field.
func UpdatedByIdLTE(v int) predicate.Script {
	return predicate.Script(sql.FieldLTE(FieldUpdatedById, v))
}

// CreatedByIdEQ applies the EQ predicate on the "createdById" field.
func CreatedByIdEQ(v int) predicate.Script {
	return predicate.Script(sql.FieldEQ(FieldCreatedById, v))
}

// CreatedByIdNEQ applies the NEQ predicate on the "createdById" field.
func CreatedByIdNEQ(v int) predicate.Script {
	return predicate.Script(sql.FieldNEQ(FieldCreatedById, v))
}

// CreatedByIdIn applies the In predicate on the "createdById" field.
func CreatedByIdIn(vs ...int) predicate.Script {
	return predicate.Script(sql.FieldIn(FieldCreatedById, vs...))
}

// CreatedByIdNotIn applies the NotIn predicate on the "createdById" field.
func CreatedByIdNotIn(vs ...int) predicate.Script {
	return predicate.Script(sql.FieldNotIn(FieldCreatedById, vs...))
}

// CreatedByIdGT applies the GT predicate on the "createdById" field.
func CreatedByIdGT(v int) predicate.Script {
	return predicate.Script(sql.FieldGT(FieldCreatedById, v))
}

// CreatedByIdGTE applies the GTE predicate on the "createdById" field.
func CreatedByIdGTE(v int) predicate.Script {
	return predicate.Script(sql.FieldGTE(FieldCreatedById, v))
}

// CreatedByIdLT applies the LT predicate on the "createdById" field.
func CreatedByIdLT(v int) predicate.Script {
	return predicate.Script(sql.FieldLT(FieldCreatedById, v))
}

// CreatedByIdLTE applies the LTE predicate on the "createdById" field.
func CreatedByIdLTE(v int) predicate.Script {
	return predicate.Script(sql.FieldLTE(FieldCreatedById, v))
}

// RegionIdEQ applies the EQ predicate on the "regionId" field.
func RegionIdEQ(v int) predicate.Script {
	return predicate.Script(sql.FieldEQ(FieldRegionId, v))
}

// RegionIdNEQ applies the NEQ predicate on the "regionId" field.
func RegionIdNEQ(v int) predicate.Script {
	return predicate.Script(sql.FieldNEQ(FieldRegionId, v))
}

// RegionIdIn applies the In predicate on the "regionId" field.
func RegionIdIn(vs ...int) predicate.Script {
	return predicate.Script(sql.FieldIn(FieldRegionId, vs...))
}

// RegionIdNotIn applies the NotIn predicate on the "regionId" field.
func RegionIdNotIn(vs ...int) predicate.Script {
	return predicate.Script(sql.FieldNotIn(FieldRegionId, vs...))
}

// RegionIdGT applies the GT predicate on the "regionId" field.
func RegionIdGT(v int) predicate.Script {
	return predicate.Script(sql.FieldGT(FieldRegionId, v))
}

// RegionIdGTE applies the GTE predicate on the "regionId" field.
func RegionIdGTE(v int) predicate.Script {
	return predicate.Script(sql.FieldGTE(FieldRegionId, v))
}

// RegionIdLT applies the LT predicate on the "regionId" field.
func RegionIdLT(v int) predicate.Script {
	return predicate.Script(sql.FieldLT(FieldRegionId, v))
}

// RegionIdLTE applies the LTE predicate on the "regionId" field.
func RegionIdLTE(v int) predicate.Script {
	return predicate.Script(sql.FieldLTE(FieldRegionId, v))
}

// ManagerIdEQ applies the EQ predicate on the "managerId" field.
func ManagerIdEQ(v int) predicate.Script {
	return predicate.Script(sql.FieldEQ(FieldManagerId, v))
}

// ManagerIdNEQ applies the NEQ predicate on the "managerId" field.
func ManagerIdNEQ(v int) predicate.Script {
	return predicate.Script(sql.FieldNEQ(FieldManagerId, v))
}

// ManagerIdIn applies the In predicate on the "managerId" field.
func ManagerIdIn(vs ...int) predicate.Script {
	return predicate.Script(sql.FieldIn(FieldManagerId, vs...))
}

// ManagerIdNotIn applies the NotIn predicate on the "managerId" field.
func ManagerIdNotIn(vs ...int) predicate.Script {
	return predicate.Script(sql.FieldNotIn(FieldManagerId, vs...))
}

// ManagerIdGT applies the GT predicate on the "managerId" field.
func ManagerIdGT(v int) predicate.Script {
	return predicate.Script(sql.FieldGT(FieldManagerId, v))
}

// ManagerIdGTE applies the GTE predicate on the "managerId" field.
func ManagerIdGTE(v int) predicate.Script {
	return predicate.Script(sql.FieldGTE(FieldManagerId, v))
}

// ManagerIdLT applies the LT predicate on the "managerId" field.
func ManagerIdLT(v int) predicate.Script {
	return predicate.Script(sql.FieldLT(FieldManagerId, v))
}

// ManagerIdLTE applies the LTE predicate on the "managerId" field.
func ManagerIdLTE(v int) predicate.Script {
	return predicate.Script(sql.FieldLTE(FieldManagerId, v))
}

// ManagerGroupIdEQ applies the EQ predicate on the "managerGroupId" field.
func ManagerGroupIdEQ(v int) predicate.Script {
	return predicate.Script(sql.FieldEQ(FieldManagerGroupId, v))
}

// ManagerGroupIdNEQ applies the NEQ predicate on the "managerGroupId" field.
func ManagerGroupIdNEQ(v int) predicate.Script {
	return predicate.Script(sql.FieldNEQ(FieldManagerGroupId, v))
}

// ManagerGroupIdIn applies the In predicate on the "managerGroupId" field.
func ManagerGroupIdIn(vs ...int) predicate.Script {
	return predicate.Script(sql.FieldIn(FieldManagerGroupId, vs...))
}

// ManagerGroupIdNotIn applies the NotIn predicate on the "managerGroupId" field.
func ManagerGroupIdNotIn(vs ...int) predicate.Script {
	return predicate.Script(sql.FieldNotIn(FieldManagerGroupId, vs...))
}

// ManagerGroupIdGT applies the GT predicate on the "managerGroupId" field.
func ManagerGroupIdGT(v int) predicate.Script {
	return predicate.Script(sql.FieldGT(FieldManagerGroupId, v))
}

// ManagerGroupIdGTE applies the GTE predicate on the "managerGroupId" field.
func ManagerGroupIdGTE(v int) predicate.Script {
	return predicate.Script(sql.FieldGTE(FieldManagerGroupId, v))
}

// ManagerGroupIdLT applies the LT predicate on the "managerGroupId" field.
func ManagerGroupIdLT(v int) predicate.Script {
	return predicate.Script(sql.FieldLT(FieldManagerGroupId, v))
}

// ManagerGroupIdLTE applies the LTE predicate on the "managerGroupId" field.
func ManagerGroupIdLTE(v int) predicate.Script {
	return predicate.Script(sql.FieldLTE(FieldManagerGroupId, v))
}

// StartTimeEQ applies the EQ predicate on the "startTime" field.
func StartTimeEQ(v time.Time) predicate.Script {
	return predicate.Script(sql.FieldEQ(FieldStartTime, v))
}

// StartTimeNEQ applies the NEQ predicate on the "startTime" field.
func StartTimeNEQ(v time.Time) predicate.Script {
	return predicate.Script(sql.FieldNEQ(FieldStartTime, v))
}

// StartTimeIn applies the In predicate on the "startTime" field.
func StartTimeIn(vs ...time.Time) predicate.Script {
	return predicate.Script(sql.FieldIn(FieldStartTime, vs...))
}

// StartTimeNotIn applies the NotIn predicate on the "startTime" field.
func StartTimeNotIn(vs ...time.Time) predicate.Script {
	return predicate.Script(sql.FieldNotIn(FieldStartTime, vs...))
}

// StartTimeGT applies the GT predicate on the "startTime" field.
func StartTimeGT(v time.Time) predicate.Script {
	return predicate.Script(sql.FieldGT(FieldStartTime, v))
}

// StartTimeGTE applies the GTE predicate on the "startTime" field.
func StartTimeGTE(v time.Time) predicate.Script {
	return predicate.Script(sql.FieldGTE(FieldStartTime, v))
}

// StartTimeLT applies the LT predicate on the "startTime" field.
func StartTimeLT(v time.Time) predicate.Script {
	return predicate.Script(sql.FieldLT(FieldStartTime, v))
}

// StartTimeLTE applies the LTE predicate on the "startTime" field.
func StartTimeLTE(v time.Time) predicate.Script {
	return predicate.Script(sql.FieldLTE(FieldStartTime, v))
}

// EndTimeEQ applies the EQ predicate on the "endTime" field.
func EndTimeEQ(v time.Time) predicate.Script {
	return predicate.Script(sql.FieldEQ(FieldEndTime, v))
}

// EndTimeNEQ applies the NEQ predicate on the "endTime" field.
func EndTimeNEQ(v time.Time) predicate.Script {
	return predicate.Script(sql.FieldNEQ(FieldEndTime, v))
}

// EndTimeIn applies the In predicate on the "endTime" field.
func EndTimeIn(vs ...time.Time) predicate.Script {
	return predicate.Script(sql.FieldIn(FieldEndTime, vs...))
}

// EndTimeNotIn applies the NotIn predicate on the "endTime" field.
func EndTimeNotIn(vs ...time.Time) predicate.Script {
	return predicate.Script(sql.FieldNotIn(FieldEndTime, vs...))
}

// EndTimeGT applies the GT predicate on the "endTime" field.
func EndTimeGT(v time.Time) predicate.Script {
	return predicate.Script(sql.FieldGT(FieldEndTime, v))
}

// EndTimeGTE applies the GTE predicate on the "endTime" field.
func EndTimeGTE(v time.Time) predicate.Script {
	return predicate.Script(sql.FieldGTE(FieldEndTime, v))
}

// EndTimeLT applies the LT predicate on the "endTime" field.
func EndTimeLT(v time.Time) predicate.Script {
	return predicate.Script(sql.FieldLT(FieldEndTime, v))
}

// EndTimeLTE applies the LTE predicate on the "endTime" field.
func EndTimeLTE(v time.Time) predicate.Script {
	return predicate.Script(sql.FieldLTE(FieldEndTime, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Script) predicate.Script {
	return predicate.Script(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Script) predicate.Script {
	return predicate.Script(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Script) predicate.Script {
	return predicate.Script(sql.NotPredicates(p))
}
