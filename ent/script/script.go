// Code generated by ent, DO NOT EDIT.

package script

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the script type in the database.
	Label = "script"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldProgram holds the string denoting the program field in the database.
	FieldProgram = "program"
	// FieldUpdatedAt holds the string denoting the updatedat field in the database.
	FieldUpdatedAt = "updatedAt"
	// FieldCreatedAt holds the string denoting the createdat field in the database.
	FieldCreatedAt = "createdAt"
	// FieldJobId holds the string denoting the jobid field in the database.
	FieldJobId = "jobId"
	// FieldHostname holds the string denoting the hostname field in the database.
	FieldHostname = "hostname"
	// FieldCommand holds the string denoting the command field in the database.
	FieldCommand = "command"
	// FieldComment holds the string denoting the comment field in the database.
	FieldComment = "comment"
	// FieldUsable holds the string denoting the usable field in the database.
	FieldUsable = "usable"
	// FieldRepeatInterval holds the string denoting the repeatinterval field in the database.
	FieldRepeatInterval = "repeatInterval"
	// FieldUpdatedById holds the string denoting the updatedbyid field in the database.
	FieldUpdatedById = "updatedById"
	// FieldCreatedById holds the string denoting the createdbyid field in the database.
	FieldCreatedById = "createdById"
	// FieldRegionId holds the string denoting the regionid field in the database.
	FieldRegionId = "regionId"
	// FieldManagerId holds the string denoting the managerid field in the database.
	FieldManagerId = "managerId"
	// FieldManagerGroupId holds the string denoting the managergroupid field in the database.
	FieldManagerGroupId = "managerGroupId"
	// FieldStartTime holds the string denoting the starttime field in the database.
	FieldStartTime = "startTime"
	// FieldEndTime holds the string denoting the endtime field in the database.
	FieldEndTime = "endTime"
	// Table holds the table name of the script in the database.
	Table = "script"
)

// Columns holds all SQL columns for script fields.
var Columns = []string{
	FieldID,
	FieldProgram,
	FieldUpdatedAt,
	FieldCreatedAt,
	FieldJobId,
	FieldHostname,
	FieldCommand,
	FieldComment,
	FieldUsable,
	FieldRepeatInterval,
	FieldUpdatedById,
	FieldCreatedById,
	FieldRegionId,
	FieldManagerId,
	FieldManagerGroupId,
	FieldStartTime,
	FieldEndTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultUpdatedAt holds the default value on creation for the "updatedAt" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updatedAt" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultCreatedAt holds the default value on creation for the "createdAt" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the Script queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByProgram orders the results by the program field.
func ByProgram(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProgram, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updatedAt field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedAt orders the results by the createdAt field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByJobId orders the results by the jobId field.
func ByJobId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldJobId, opts...).ToFunc()
}

// ByHostname orders the results by the hostname field.
func ByHostname(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHostname, opts...).ToFunc()
}

// ByCommand orders the results by the command field.
func ByCommand(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCommand, opts...).ToFunc()
}

// ByComment orders the results by the comment field.
func ByComment(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldComment, opts...).ToFunc()
}

// ByUsable orders the results by the usable field.
func ByUsable(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsable, opts...).ToFunc()
}

// ByRepeatInterval orders the results by the repeatInterval field.
func ByRepeatInterval(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRepeatInterval, opts...).ToFunc()
}

// ByUpdatedById orders the results by the updatedById field.
func ByUpdatedById(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedById, opts...).ToFunc()
}

// ByCreatedById orders the results by the createdById field.
func ByCreatedById(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedById, opts...).ToFunc()
}

// ByRegionId orders the results by the regionId field.
func ByRegionId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRegionId, opts...).ToFunc()
}

// ByManagerId orders the results by the managerId field.
func ByManagerId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldManagerId, opts...).ToFunc()
}

// ByManagerGroupId orders the results by the managerGroupId field.
func ByManagerGroupId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldManagerGroupId, opts...).ToFunc()
}

// ByStartTime orders the results by the startTime field.
func ByStartTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartTime, opts...).ToFunc()
}

// ByEndTime orders the results by the endTime field.
func ByEndTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndTime, opts...).ToFunc()
}
