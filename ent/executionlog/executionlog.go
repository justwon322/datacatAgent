// Code generated by ent, DO NOT EDIT.

package executionlog

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the executionlog type in the database.
	Label = "execution_log"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldResult holds the string denoting the result field in the database.
	FieldResult = "result"
	// FieldExecutedAt holds the string denoting the executedat field in the database.
	FieldExecutedAt = "executedAt"
	// FieldScriptId holds the string denoting the scriptid field in the database.
	FieldScriptId = "scriptId"
	// Table holds the table name of the executionlog in the database.
	Table = "execution_log"
)

// Columns holds all SQL columns for executionlog fields.
var Columns = []string{
	FieldID,
	FieldStatus,
	FieldResult,
	FieldExecutedAt,
	FieldScriptId,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultExecutedAt holds the default value on creation for the "executedAt" field.
	DefaultExecutedAt func() time.Time
)

// OrderOption defines the ordering options for the ExecutionLog queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByResult orders the results by the result field.
func ByResult(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResult, opts...).ToFunc()
}

// ByExecutedAt orders the results by the executedAt field.
func ByExecutedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExecutedAt, opts...).ToFunc()
}

// ByScriptId orders the results by the scriptId field.
func ByScriptId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScriptId, opts...).ToFunc()
}
