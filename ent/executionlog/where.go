// Code generated by ent, DO NOT EDIT.

package executionlog

import (
	"datacatAgent/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.ExecutionLog {
	return predicate.ExecutionLog(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.ExecutionLog {
	return predicate.ExecutionLog(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.ExecutionLog {
	return predicate.ExecutionLog(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.ExecutionLog {
	return predicate.ExecutionLog(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.ExecutionLog {
	return predicate.ExecutionLog(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.ExecutionLog {
	return predicate.ExecutionLog(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.ExecutionLog {
	return predicate.ExecutionLog(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.ExecutionLog {
	return predicate.ExecutionLog(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.ExecutionLog {
	return predicate.ExecutionLog(sql.FieldLTE(FieldID, id))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int) predicate.ExecutionLog {
	return predicate.ExecutionLog(sql.FieldEQ(FieldStatus, v))
}

// Result applies equality check predicate on the "result" field. It's identical to ResultEQ.
func Result(v string) predicate.ExecutionLog {
	return predicate.ExecutionLog(sql.FieldEQ(FieldResult, v))
}

// ExecutedAt applies equality check predicate on the "executedAt" field. It's identical to ExecutedAtEQ.
func ExecutedAt(v time.Time) predicate.ExecutionLog {
	return predicate.ExecutionLog(sql.FieldEQ(FieldExecutedAt, v))
}

// ScriptId applies equality check predicate on the "scriptId" field. It's identical to ScriptIdEQ.
func ScriptId(v int) predicate.ExecutionLog {
	return predicate.ExecutionLog(sql.FieldEQ(FieldScriptId, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int) predicate.ExecutionLog {
	return predicate.ExecutionLog(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int) predicate.ExecutionLog {
	return predicate.ExecutionLog(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int) predicate.ExecutionLog {
	return predicate.ExecutionLog(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int) predicate.ExecutionLog {
	return predicate.ExecutionLog(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int) predicate.ExecutionLog {
	return predicate.ExecutionLog(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int) predicate.ExecutionLog {
	return predicate.ExecutionLog(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int) predicate.ExecutionLog {
	return predicate.ExecutionLog(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int) predicate.ExecutionLog {
	return predicate.ExecutionLog(sql.FieldLTE(FieldStatus, v))
}

// ResultEQ applies the EQ predicate on the "result" field.
func ResultEQ(v string) predicate.ExecutionLog {
	return predicate.ExecutionLog(sql.FieldEQ(FieldResult, v))
}

// ResultNEQ applies the NEQ predicate on the "result" field.
func ResultNEQ(v string) predicate.ExecutionLog {
	return predicate.ExecutionLog(sql.FieldNEQ(FieldResult, v))
}

// ResultIn applies the In predicate on the "result" field.
func ResultIn(vs ...string) predicate.ExecutionLog {
	return predicate.ExecutionLog(sql.FieldIn(FieldResult, vs...))
}

// ResultNotIn applies the NotIn predicate on the "result" field.
func ResultNotIn(vs ...string) predicate.ExecutionLog {
	return predicate.ExecutionLog(sql.FieldNotIn(FieldResult, vs...))
}

// ResultGT applies the GT predicate on the "result" field.
func ResultGT(v string) predicate.ExecutionLog {
	return predicate.ExecutionLog(sql.FieldGT(FieldResult, v))
}

// ResultGTE applies the GTE predicate on the "result" field.
func ResultGTE(v string) predicate.ExecutionLog {
	return predicate.ExecutionLog(sql.FieldGTE(FieldResult, v))
}

// ResultLT applies the LT predicate on the "result" field.
func ResultLT(v string) predicate.ExecutionLog {
	return predicate.ExecutionLog(sql.FieldLT(FieldResult, v))
}

// ResultLTE applies the LTE predicate on the "result" field.
func ResultLTE(v string) predicate.ExecutionLog {
	return predicate.ExecutionLog(sql.FieldLTE(FieldResult, v))
}

// ResultContains applies the Contains predicate on the "result" field.
func ResultContains(v string) predicate.ExecutionLog {
	return predicate.ExecutionLog(sql.FieldContains(FieldResult, v))
}

// ResultHasPrefix applies the HasPrefix predicate on the "result" field.
func ResultHasPrefix(v string) predicate.ExecutionLog {
	return predicate.ExecutionLog(sql.FieldHasPrefix(FieldResult, v))
}

// ResultHasSuffix applies the HasSuffix predicate on the "result" field.
func ResultHasSuffix(v string) predicate.ExecutionLog {
	return predicate.ExecutionLog(sql.FieldHasSuffix(FieldResult, v))
}

// ResultEqualFold applies the EqualFold predicate on the "result" field.
func ResultEqualFold(v string) predicate.ExecutionLog {
	return predicate.ExecutionLog(sql.FieldEqualFold(FieldResult, v))
}

// ResultContainsFold applies the ContainsFold predicate on the "result" field.
func ResultContainsFold(v string) predicate.ExecutionLog {
	return predicate.ExecutionLog(sql.FieldContainsFold(FieldResult, v))
}

// ExecutedAtEQ applies the EQ predicate on the "executedAt" field.
func ExecutedAtEQ(v time.Time) predicate.ExecutionLog {
	return predicate.ExecutionLog(sql.FieldEQ(FieldExecutedAt, v))
}

// ExecutedAtNEQ applies the NEQ predicate on the "executedAt" field.
func ExecutedAtNEQ(v time.Time) predicate.ExecutionLog {
	return predicate.ExecutionLog(sql.FieldNEQ(FieldExecutedAt, v))
}

// ExecutedAtIn applies the In predicate on the "executedAt" field.
func ExecutedAtIn(vs ...time.Time) predicate.ExecutionLog {
	return predicate.ExecutionLog(sql.FieldIn(FieldExecutedAt, vs...))
}

// ExecutedAtNotIn applies the NotIn predicate on the "executedAt" field.
func ExecutedAtNotIn(vs ...time.Time) predicate.ExecutionLog {
	return predicate.ExecutionLog(sql.FieldNotIn(FieldExecutedAt, vs...))
}

// ExecutedAtGT applies the GT predicate on the "executedAt" field.
func ExecutedAtGT(v time.Time) predicate.ExecutionLog {
	return predicate.ExecutionLog(sql.FieldGT(FieldExecutedAt, v))
}

// ExecutedAtGTE applies the GTE predicate on the "executedAt" field.
func ExecutedAtGTE(v time.Time) predicate.ExecutionLog {
	return predicate.ExecutionLog(sql.FieldGTE(FieldExecutedAt, v))
}

// ExecutedAtLT applies the LT predicate on the "executedAt" field.
func ExecutedAtLT(v time.Time) predicate.ExecutionLog {
	return predicate.ExecutionLog(sql.FieldLT(FieldExecutedAt, v))
}

// ExecutedAtLTE applies the LTE predicate on the "executedAt" field.
func ExecutedAtLTE(v time.Time) predicate.ExecutionLog {
	return predicate.ExecutionLog(sql.FieldLTE(FieldExecutedAt, v))
}

// ScriptIdEQ applies the EQ predicate on the "scriptId" field.
func ScriptIdEQ(v int) predicate.ExecutionLog {
	return predicate.ExecutionLog(sql.FieldEQ(FieldScriptId, v))
}

// ScriptIdNEQ applies the NEQ predicate on the "scriptId" field.
func ScriptIdNEQ(v int) predicate.ExecutionLog {
	return predicate.ExecutionLog(sql.FieldNEQ(FieldScriptId, v))
}

// ScriptIdIn applies the In predicate on the "scriptId" field.
func ScriptIdIn(vs ...int) predicate.ExecutionLog {
	return predicate.ExecutionLog(sql.FieldIn(FieldScriptId, vs...))
}

// ScriptIdNotIn applies the NotIn predicate on the "scriptId" field.
func ScriptIdNotIn(vs ...int) predicate.ExecutionLog {
	return predicate.ExecutionLog(sql.FieldNotIn(FieldScriptId, vs...))
}

// ScriptIdGT applies the GT predicate on the "scriptId" field.
func ScriptIdGT(v int) predicate.ExecutionLog {
	return predicate.ExecutionLog(sql.FieldGT(FieldScriptId, v))
}

// ScriptIdGTE applies the GTE predicate on the "scriptId" field.
func ScriptIdGTE(v int) predicate.ExecutionLog {
	return predicate.ExecutionLog(sql.FieldGTE(FieldScriptId, v))
}

// ScriptIdLT applies the LT predicate on the "scriptId" field.
func ScriptIdLT(v int) predicate.ExecutionLog {
	return predicate.ExecutionLog(sql.FieldLT(FieldScriptId, v))
}

// ScriptIdLTE applies the LTE predicate on the "scriptId" field.
func ScriptIdLTE(v int) predicate.ExecutionLog {
	return predicate.ExecutionLog(sql.FieldLTE(FieldScriptId, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ExecutionLog) predicate.ExecutionLog {
	return predicate.ExecutionLog(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ExecutionLog) predicate.ExecutionLog {
	return predicate.ExecutionLog(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ExecutionLog) predicate.ExecutionLog {
	return predicate.ExecutionLog(sql.NotPredicates(p))
}
