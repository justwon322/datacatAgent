// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"datacatAgent/ent/migrate"

	"datacatAgent/ent/categorymain"
	"datacatAgent/ent/categorysub"
	"datacatAgent/ent/executionlog"
	"datacatAgent/ent/job"
	"datacatAgent/ent/message"
	"datacatAgent/ent/messagemail"
	"datacatAgent/ent/script"
	"datacatAgent/ent/user"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// CategoryMain is the client for interacting with the CategoryMain builders.
	CategoryMain *CategoryMainClient
	// CategorySub is the client for interacting with the CategorySub builders.
	CategorySub *CategorySubClient
	// ExecutionLog is the client for interacting with the ExecutionLog builders.
	ExecutionLog *ExecutionLogClient
	// Job is the client for interacting with the Job builders.
	Job *JobClient
	// Message is the client for interacting with the Message builders.
	Message *MessageClient
	// MessageMail is the client for interacting with the MessageMail builders.
	MessageMail *MessageMailClient
	// Script is the client for interacting with the Script builders.
	Script *ScriptClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.CategoryMain = NewCategoryMainClient(c.config)
	c.CategorySub = NewCategorySubClient(c.config)
	c.ExecutionLog = NewExecutionLogClient(c.config)
	c.Job = NewJobClient(c.config)
	c.Message = NewMessageClient(c.config)
	c.MessageMail = NewMessageMailClient(c.config)
	c.Script = NewScriptClient(c.config)
	c.User = NewUserClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		CategoryMain: NewCategoryMainClient(cfg),
		CategorySub:  NewCategorySubClient(cfg),
		ExecutionLog: NewExecutionLogClient(cfg),
		Job:          NewJobClient(cfg),
		Message:      NewMessageClient(cfg),
		MessageMail:  NewMessageMailClient(cfg),
		Script:       NewScriptClient(cfg),
		User:         NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		CategoryMain: NewCategoryMainClient(cfg),
		CategorySub:  NewCategorySubClient(cfg),
		ExecutionLog: NewExecutionLogClient(cfg),
		Job:          NewJobClient(cfg),
		Message:      NewMessageClient(cfg),
		MessageMail:  NewMessageMailClient(cfg),
		Script:       NewScriptClient(cfg),
		User:         NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		CategoryMain.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.CategoryMain, c.CategorySub, c.ExecutionLog, c.Job, c.Message, c.MessageMail,
		c.Script, c.User,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.CategoryMain, c.CategorySub, c.ExecutionLog, c.Job, c.Message, c.MessageMail,
		c.Script, c.User,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *CategoryMainMutation:
		return c.CategoryMain.mutate(ctx, m)
	case *CategorySubMutation:
		return c.CategorySub.mutate(ctx, m)
	case *ExecutionLogMutation:
		return c.ExecutionLog.mutate(ctx, m)
	case *JobMutation:
		return c.Job.mutate(ctx, m)
	case *MessageMutation:
		return c.Message.mutate(ctx, m)
	case *MessageMailMutation:
		return c.MessageMail.mutate(ctx, m)
	case *ScriptMutation:
		return c.Script.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// CategoryMainClient is a client for the CategoryMain schema.
type CategoryMainClient struct {
	config
}

// NewCategoryMainClient returns a client for the CategoryMain from the given config.
func NewCategoryMainClient(c config) *CategoryMainClient {
	return &CategoryMainClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `categorymain.Hooks(f(g(h())))`.
func (c *CategoryMainClient) Use(hooks ...Hook) {
	c.hooks.CategoryMain = append(c.hooks.CategoryMain, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `categorymain.Intercept(f(g(h())))`.
func (c *CategoryMainClient) Intercept(interceptors ...Interceptor) {
	c.inters.CategoryMain = append(c.inters.CategoryMain, interceptors...)
}

// Create returns a builder for creating a CategoryMain entity.
func (c *CategoryMainClient) Create() *CategoryMainCreate {
	mutation := newCategoryMainMutation(c.config, OpCreate)
	return &CategoryMainCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CategoryMain entities.
func (c *CategoryMainClient) CreateBulk(builders ...*CategoryMainCreate) *CategoryMainCreateBulk {
	return &CategoryMainCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CategoryMainClient) MapCreateBulk(slice any, setFunc func(*CategoryMainCreate, int)) *CategoryMainCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CategoryMainCreateBulk{err: fmt.Errorf("calling to CategoryMainClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CategoryMainCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CategoryMainCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CategoryMain.
func (c *CategoryMainClient) Update() *CategoryMainUpdate {
	mutation := newCategoryMainMutation(c.config, OpUpdate)
	return &CategoryMainUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CategoryMainClient) UpdateOne(cm *CategoryMain) *CategoryMainUpdateOne {
	mutation := newCategoryMainMutation(c.config, OpUpdateOne, withCategoryMain(cm))
	return &CategoryMainUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CategoryMainClient) UpdateOneID(id int32) *CategoryMainUpdateOne {
	mutation := newCategoryMainMutation(c.config, OpUpdateOne, withCategoryMainID(id))
	return &CategoryMainUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CategoryMain.
func (c *CategoryMainClient) Delete() *CategoryMainDelete {
	mutation := newCategoryMainMutation(c.config, OpDelete)
	return &CategoryMainDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CategoryMainClient) DeleteOne(cm *CategoryMain) *CategoryMainDeleteOne {
	return c.DeleteOneID(cm.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CategoryMainClient) DeleteOneID(id int32) *CategoryMainDeleteOne {
	builder := c.Delete().Where(categorymain.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CategoryMainDeleteOne{builder}
}

// Query returns a query builder for CategoryMain.
func (c *CategoryMainClient) Query() *CategoryMainQuery {
	return &CategoryMainQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCategoryMain},
		inters: c.Interceptors(),
	}
}

// Get returns a CategoryMain entity by its id.
func (c *CategoryMainClient) Get(ctx context.Context, id int32) (*CategoryMain, error) {
	return c.Query().Where(categorymain.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CategoryMainClient) GetX(ctx context.Context, id int32) *CategoryMain {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CategoryMainClient) Hooks() []Hook {
	return c.hooks.CategoryMain
}

// Interceptors returns the client interceptors.
func (c *CategoryMainClient) Interceptors() []Interceptor {
	return c.inters.CategoryMain
}

func (c *CategoryMainClient) mutate(ctx context.Context, m *CategoryMainMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CategoryMainCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CategoryMainUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CategoryMainUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CategoryMainDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CategoryMain mutation op: %q", m.Op())
	}
}

// CategorySubClient is a client for the CategorySub schema.
type CategorySubClient struct {
	config
}

// NewCategorySubClient returns a client for the CategorySub from the given config.
func NewCategorySubClient(c config) *CategorySubClient {
	return &CategorySubClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `categorysub.Hooks(f(g(h())))`.
func (c *CategorySubClient) Use(hooks ...Hook) {
	c.hooks.CategorySub = append(c.hooks.CategorySub, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `categorysub.Intercept(f(g(h())))`.
func (c *CategorySubClient) Intercept(interceptors ...Interceptor) {
	c.inters.CategorySub = append(c.inters.CategorySub, interceptors...)
}

// Create returns a builder for creating a CategorySub entity.
func (c *CategorySubClient) Create() *CategorySubCreate {
	mutation := newCategorySubMutation(c.config, OpCreate)
	return &CategorySubCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CategorySub entities.
func (c *CategorySubClient) CreateBulk(builders ...*CategorySubCreate) *CategorySubCreateBulk {
	return &CategorySubCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CategorySubClient) MapCreateBulk(slice any, setFunc func(*CategorySubCreate, int)) *CategorySubCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CategorySubCreateBulk{err: fmt.Errorf("calling to CategorySubClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CategorySubCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CategorySubCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CategorySub.
func (c *CategorySubClient) Update() *CategorySubUpdate {
	mutation := newCategorySubMutation(c.config, OpUpdate)
	return &CategorySubUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CategorySubClient) UpdateOne(cs *CategorySub) *CategorySubUpdateOne {
	mutation := newCategorySubMutation(c.config, OpUpdateOne, withCategorySub(cs))
	return &CategorySubUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CategorySubClient) UpdateOneID(id int32) *CategorySubUpdateOne {
	mutation := newCategorySubMutation(c.config, OpUpdateOne, withCategorySubID(id))
	return &CategorySubUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CategorySub.
func (c *CategorySubClient) Delete() *CategorySubDelete {
	mutation := newCategorySubMutation(c.config, OpDelete)
	return &CategorySubDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CategorySubClient) DeleteOne(cs *CategorySub) *CategorySubDeleteOne {
	return c.DeleteOneID(cs.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CategorySubClient) DeleteOneID(id int32) *CategorySubDeleteOne {
	builder := c.Delete().Where(categorysub.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CategorySubDeleteOne{builder}
}

// Query returns a query builder for CategorySub.
func (c *CategorySubClient) Query() *CategorySubQuery {
	return &CategorySubQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCategorySub},
		inters: c.Interceptors(),
	}
}

// Get returns a CategorySub entity by its id.
func (c *CategorySubClient) Get(ctx context.Context, id int32) (*CategorySub, error) {
	return c.Query().Where(categorysub.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CategorySubClient) GetX(ctx context.Context, id int32) *CategorySub {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CategorySubClient) Hooks() []Hook {
	return c.hooks.CategorySub
}

// Interceptors returns the client interceptors.
func (c *CategorySubClient) Interceptors() []Interceptor {
	return c.inters.CategorySub
}

func (c *CategorySubClient) mutate(ctx context.Context, m *CategorySubMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CategorySubCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CategorySubUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CategorySubUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CategorySubDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CategorySub mutation op: %q", m.Op())
	}
}

// ExecutionLogClient is a client for the ExecutionLog schema.
type ExecutionLogClient struct {
	config
}

// NewExecutionLogClient returns a client for the ExecutionLog from the given config.
func NewExecutionLogClient(c config) *ExecutionLogClient {
	return &ExecutionLogClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `executionlog.Hooks(f(g(h())))`.
func (c *ExecutionLogClient) Use(hooks ...Hook) {
	c.hooks.ExecutionLog = append(c.hooks.ExecutionLog, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `executionlog.Intercept(f(g(h())))`.
func (c *ExecutionLogClient) Intercept(interceptors ...Interceptor) {
	c.inters.ExecutionLog = append(c.inters.ExecutionLog, interceptors...)
}

// Create returns a builder for creating a ExecutionLog entity.
func (c *ExecutionLogClient) Create() *ExecutionLogCreate {
	mutation := newExecutionLogMutation(c.config, OpCreate)
	return &ExecutionLogCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ExecutionLog entities.
func (c *ExecutionLogClient) CreateBulk(builders ...*ExecutionLogCreate) *ExecutionLogCreateBulk {
	return &ExecutionLogCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ExecutionLogClient) MapCreateBulk(slice any, setFunc func(*ExecutionLogCreate, int)) *ExecutionLogCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ExecutionLogCreateBulk{err: fmt.Errorf("calling to ExecutionLogClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ExecutionLogCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ExecutionLogCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ExecutionLog.
func (c *ExecutionLogClient) Update() *ExecutionLogUpdate {
	mutation := newExecutionLogMutation(c.config, OpUpdate)
	return &ExecutionLogUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ExecutionLogClient) UpdateOne(el *ExecutionLog) *ExecutionLogUpdateOne {
	mutation := newExecutionLogMutation(c.config, OpUpdateOne, withExecutionLog(el))
	return &ExecutionLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ExecutionLogClient) UpdateOneID(id int64) *ExecutionLogUpdateOne {
	mutation := newExecutionLogMutation(c.config, OpUpdateOne, withExecutionLogID(id))
	return &ExecutionLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ExecutionLog.
func (c *ExecutionLogClient) Delete() *ExecutionLogDelete {
	mutation := newExecutionLogMutation(c.config, OpDelete)
	return &ExecutionLogDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ExecutionLogClient) DeleteOne(el *ExecutionLog) *ExecutionLogDeleteOne {
	return c.DeleteOneID(el.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ExecutionLogClient) DeleteOneID(id int64) *ExecutionLogDeleteOne {
	builder := c.Delete().Where(executionlog.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ExecutionLogDeleteOne{builder}
}

// Query returns a query builder for ExecutionLog.
func (c *ExecutionLogClient) Query() *ExecutionLogQuery {
	return &ExecutionLogQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeExecutionLog},
		inters: c.Interceptors(),
	}
}

// Get returns a ExecutionLog entity by its id.
func (c *ExecutionLogClient) Get(ctx context.Context, id int64) (*ExecutionLog, error) {
	return c.Query().Where(executionlog.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ExecutionLogClient) GetX(ctx context.Context, id int64) *ExecutionLog {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ExecutionLogClient) Hooks() []Hook {
	return c.hooks.ExecutionLog
}

// Interceptors returns the client interceptors.
func (c *ExecutionLogClient) Interceptors() []Interceptor {
	return c.inters.ExecutionLog
}

func (c *ExecutionLogClient) mutate(ctx context.Context, m *ExecutionLogMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ExecutionLogCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ExecutionLogUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ExecutionLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ExecutionLogDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ExecutionLog mutation op: %q", m.Op())
	}
}

// JobClient is a client for the Job schema.
type JobClient struct {
	config
}

// NewJobClient returns a client for the Job from the given config.
func NewJobClient(c config) *JobClient {
	return &JobClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `job.Hooks(f(g(h())))`.
func (c *JobClient) Use(hooks ...Hook) {
	c.hooks.Job = append(c.hooks.Job, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `job.Intercept(f(g(h())))`.
func (c *JobClient) Intercept(interceptors ...Interceptor) {
	c.inters.Job = append(c.inters.Job, interceptors...)
}

// Create returns a builder for creating a Job entity.
func (c *JobClient) Create() *JobCreate {
	mutation := newJobMutation(c.config, OpCreate)
	return &JobCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Job entities.
func (c *JobClient) CreateBulk(builders ...*JobCreate) *JobCreateBulk {
	return &JobCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *JobClient) MapCreateBulk(slice any, setFunc func(*JobCreate, int)) *JobCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &JobCreateBulk{err: fmt.Errorf("calling to JobClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*JobCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &JobCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Job.
func (c *JobClient) Update() *JobUpdate {
	mutation := newJobMutation(c.config, OpUpdate)
	return &JobUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *JobClient) UpdateOne(j *Job) *JobUpdateOne {
	mutation := newJobMutation(c.config, OpUpdateOne, withJob(j))
	return &JobUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *JobClient) UpdateOneID(id int32) *JobUpdateOne {
	mutation := newJobMutation(c.config, OpUpdateOne, withJobID(id))
	return &JobUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Job.
func (c *JobClient) Delete() *JobDelete {
	mutation := newJobMutation(c.config, OpDelete)
	return &JobDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *JobClient) DeleteOne(j *Job) *JobDeleteOne {
	return c.DeleteOneID(j.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *JobClient) DeleteOneID(id int32) *JobDeleteOne {
	builder := c.Delete().Where(job.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &JobDeleteOne{builder}
}

// Query returns a query builder for Job.
func (c *JobClient) Query() *JobQuery {
	return &JobQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeJob},
		inters: c.Interceptors(),
	}
}

// Get returns a Job entity by its id.
func (c *JobClient) Get(ctx context.Context, id int32) (*Job, error) {
	return c.Query().Where(job.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *JobClient) GetX(ctx context.Context, id int32) *Job {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *JobClient) Hooks() []Hook {
	return c.hooks.Job
}

// Interceptors returns the client interceptors.
func (c *JobClient) Interceptors() []Interceptor {
	return c.inters.Job
}

func (c *JobClient) mutate(ctx context.Context, m *JobMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&JobCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&JobUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&JobUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&JobDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Job mutation op: %q", m.Op())
	}
}

// MessageClient is a client for the Message schema.
type MessageClient struct {
	config
}

// NewMessageClient returns a client for the Message from the given config.
func NewMessageClient(c config) *MessageClient {
	return &MessageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `message.Hooks(f(g(h())))`.
func (c *MessageClient) Use(hooks ...Hook) {
	c.hooks.Message = append(c.hooks.Message, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `message.Intercept(f(g(h())))`.
func (c *MessageClient) Intercept(interceptors ...Interceptor) {
	c.inters.Message = append(c.inters.Message, interceptors...)
}

// Create returns a builder for creating a Message entity.
func (c *MessageClient) Create() *MessageCreate {
	mutation := newMessageMutation(c.config, OpCreate)
	return &MessageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Message entities.
func (c *MessageClient) CreateBulk(builders ...*MessageCreate) *MessageCreateBulk {
	return &MessageCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *MessageClient) MapCreateBulk(slice any, setFunc func(*MessageCreate, int)) *MessageCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &MessageCreateBulk{err: fmt.Errorf("calling to MessageClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*MessageCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &MessageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Message.
func (c *MessageClient) Update() *MessageUpdate {
	mutation := newMessageMutation(c.config, OpUpdate)
	return &MessageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MessageClient) UpdateOne(m *Message) *MessageUpdateOne {
	mutation := newMessageMutation(c.config, OpUpdateOne, withMessage(m))
	return &MessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MessageClient) UpdateOneID(id int64) *MessageUpdateOne {
	mutation := newMessageMutation(c.config, OpUpdateOne, withMessageID(id))
	return &MessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Message.
func (c *MessageClient) Delete() *MessageDelete {
	mutation := newMessageMutation(c.config, OpDelete)
	return &MessageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MessageClient) DeleteOne(m *Message) *MessageDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MessageClient) DeleteOneID(id int64) *MessageDeleteOne {
	builder := c.Delete().Where(message.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MessageDeleteOne{builder}
}

// Query returns a query builder for Message.
func (c *MessageClient) Query() *MessageQuery {
	return &MessageQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMessage},
		inters: c.Interceptors(),
	}
}

// Get returns a Message entity by its id.
func (c *MessageClient) Get(ctx context.Context, id int64) (*Message, error) {
	return c.Query().Where(message.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MessageClient) GetX(ctx context.Context, id int64) *Message {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *MessageClient) Hooks() []Hook {
	return c.hooks.Message
}

// Interceptors returns the client interceptors.
func (c *MessageClient) Interceptors() []Interceptor {
	return c.inters.Message
}

func (c *MessageClient) mutate(ctx context.Context, m *MessageMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MessageCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MessageUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MessageDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Message mutation op: %q", m.Op())
	}
}

// MessageMailClient is a client for the MessageMail schema.
type MessageMailClient struct {
	config
}

// NewMessageMailClient returns a client for the MessageMail from the given config.
func NewMessageMailClient(c config) *MessageMailClient {
	return &MessageMailClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `messagemail.Hooks(f(g(h())))`.
func (c *MessageMailClient) Use(hooks ...Hook) {
	c.hooks.MessageMail = append(c.hooks.MessageMail, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `messagemail.Intercept(f(g(h())))`.
func (c *MessageMailClient) Intercept(interceptors ...Interceptor) {
	c.inters.MessageMail = append(c.inters.MessageMail, interceptors...)
}

// Create returns a builder for creating a MessageMail entity.
func (c *MessageMailClient) Create() *MessageMailCreate {
	mutation := newMessageMailMutation(c.config, OpCreate)
	return &MessageMailCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of MessageMail entities.
func (c *MessageMailClient) CreateBulk(builders ...*MessageMailCreate) *MessageMailCreateBulk {
	return &MessageMailCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *MessageMailClient) MapCreateBulk(slice any, setFunc func(*MessageMailCreate, int)) *MessageMailCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &MessageMailCreateBulk{err: fmt.Errorf("calling to MessageMailClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*MessageMailCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &MessageMailCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for MessageMail.
func (c *MessageMailClient) Update() *MessageMailUpdate {
	mutation := newMessageMailMutation(c.config, OpUpdate)
	return &MessageMailUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MessageMailClient) UpdateOne(mm *MessageMail) *MessageMailUpdateOne {
	mutation := newMessageMailMutation(c.config, OpUpdateOne, withMessageMail(mm))
	return &MessageMailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MessageMailClient) UpdateOneID(id int) *MessageMailUpdateOne {
	mutation := newMessageMailMutation(c.config, OpUpdateOne, withMessageMailID(id))
	return &MessageMailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MessageMail.
func (c *MessageMailClient) Delete() *MessageMailDelete {
	mutation := newMessageMailMutation(c.config, OpDelete)
	return &MessageMailDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MessageMailClient) DeleteOne(mm *MessageMail) *MessageMailDeleteOne {
	return c.DeleteOneID(mm.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MessageMailClient) DeleteOneID(id int) *MessageMailDeleteOne {
	builder := c.Delete().Where(messagemail.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MessageMailDeleteOne{builder}
}

// Query returns a query builder for MessageMail.
func (c *MessageMailClient) Query() *MessageMailQuery {
	return &MessageMailQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMessageMail},
		inters: c.Interceptors(),
	}
}

// Get returns a MessageMail entity by its id.
func (c *MessageMailClient) Get(ctx context.Context, id int) (*MessageMail, error) {
	return c.Query().Where(messagemail.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MessageMailClient) GetX(ctx context.Context, id int) *MessageMail {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *MessageMailClient) Hooks() []Hook {
	return c.hooks.MessageMail
}

// Interceptors returns the client interceptors.
func (c *MessageMailClient) Interceptors() []Interceptor {
	return c.inters.MessageMail
}

func (c *MessageMailClient) mutate(ctx context.Context, m *MessageMailMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MessageMailCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MessageMailUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MessageMailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MessageMailDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown MessageMail mutation op: %q", m.Op())
	}
}

// ScriptClient is a client for the Script schema.
type ScriptClient struct {
	config
}

// NewScriptClient returns a client for the Script from the given config.
func NewScriptClient(c config) *ScriptClient {
	return &ScriptClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `script.Hooks(f(g(h())))`.
func (c *ScriptClient) Use(hooks ...Hook) {
	c.hooks.Script = append(c.hooks.Script, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `script.Intercept(f(g(h())))`.
func (c *ScriptClient) Intercept(interceptors ...Interceptor) {
	c.inters.Script = append(c.inters.Script, interceptors...)
}

// Create returns a builder for creating a Script entity.
func (c *ScriptClient) Create() *ScriptCreate {
	mutation := newScriptMutation(c.config, OpCreate)
	return &ScriptCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Script entities.
func (c *ScriptClient) CreateBulk(builders ...*ScriptCreate) *ScriptCreateBulk {
	return &ScriptCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ScriptClient) MapCreateBulk(slice any, setFunc func(*ScriptCreate, int)) *ScriptCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ScriptCreateBulk{err: fmt.Errorf("calling to ScriptClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ScriptCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ScriptCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Script.
func (c *ScriptClient) Update() *ScriptUpdate {
	mutation := newScriptMutation(c.config, OpUpdate)
	return &ScriptUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ScriptClient) UpdateOne(s *Script) *ScriptUpdateOne {
	mutation := newScriptMutation(c.config, OpUpdateOne, withScript(s))
	return &ScriptUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ScriptClient) UpdateOneID(id int64) *ScriptUpdateOne {
	mutation := newScriptMutation(c.config, OpUpdateOne, withScriptID(id))
	return &ScriptUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Script.
func (c *ScriptClient) Delete() *ScriptDelete {
	mutation := newScriptMutation(c.config, OpDelete)
	return &ScriptDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ScriptClient) DeleteOne(s *Script) *ScriptDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ScriptClient) DeleteOneID(id int64) *ScriptDeleteOne {
	builder := c.Delete().Where(script.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ScriptDeleteOne{builder}
}

// Query returns a query builder for Script.
func (c *ScriptClient) Query() *ScriptQuery {
	return &ScriptQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeScript},
		inters: c.Interceptors(),
	}
}

// Get returns a Script entity by its id.
func (c *ScriptClient) Get(ctx context.Context, id int64) (*Script, error) {
	return c.Query().Where(script.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ScriptClient) GetX(ctx context.Context, id int64) *Script {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ScriptClient) Hooks() []Hook {
	return c.hooks.Script
}

// Interceptors returns the client interceptors.
func (c *ScriptClient) Interceptors() []Interceptor {
	return c.inters.Script
}

func (c *ScriptClient) mutate(ctx context.Context, m *ScriptMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ScriptCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ScriptUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ScriptUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ScriptDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Script mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int32) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int32) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int32) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int32) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		CategoryMain, CategorySub, ExecutionLog, Job, Message, MessageMail, Script,
		User []ent.Hook
	}
	inters struct {
		CategoryMain, CategorySub, ExecutionLog, Job, Message, MessageMail, Script,
		User []ent.Interceptor
	}
)
