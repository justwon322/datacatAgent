// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"datacatAgent/ent/messagemail"
	"datacatAgent/ent/predicate"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MessageMailUpdate is the builder for updating MessageMail entities.
type MessageMailUpdate struct {
	config
	hooks    []Hook
	mutation *MessageMailMutation
}

// Where appends a list predicates to the MessageMailUpdate builder.
func (mmu *MessageMailUpdate) Where(ps ...predicate.MessageMail) *MessageMailUpdate {
	mmu.mutation.Where(ps...)
	return mmu
}

// SetMailSubject sets the "mailSubject" field.
func (mmu *MessageMailUpdate) SetMailSubject(s string) *MessageMailUpdate {
	mmu.mutation.SetMailSubject(s)
	return mmu
}

// SetNillableMailSubject sets the "mailSubject" field if the given value is not nil.
func (mmu *MessageMailUpdate) SetNillableMailSubject(s *string) *MessageMailUpdate {
	if s != nil {
		mmu.SetMailSubject(*s)
	}
	return mmu
}

// SetMailContents sets the "mailContents" field.
func (mmu *MessageMailUpdate) SetMailContents(s string) *MessageMailUpdate {
	mmu.mutation.SetMailContents(s)
	return mmu
}

// SetNillableMailContents sets the "mailContents" field if the given value is not nil.
func (mmu *MessageMailUpdate) SetNillableMailContents(s *string) *MessageMailUpdate {
	if s != nil {
		mmu.SetMailContents(*s)
	}
	return mmu
}

// SetMailGb sets the "mailGb" field.
func (mmu *MessageMailUpdate) SetMailGb(i int) *MessageMailUpdate {
	mmu.mutation.ResetMailGb()
	mmu.mutation.SetMailGb(i)
	return mmu
}

// SetNillableMailGb sets the "mailGb" field if the given value is not nil.
func (mmu *MessageMailUpdate) SetNillableMailGb(i *int) *MessageMailUpdate {
	if i != nil {
		mmu.SetMailGb(*i)
	}
	return mmu
}

// AddMailGb adds i to the "mailGb" field.
func (mmu *MessageMailUpdate) AddMailGb(i int) *MessageMailUpdate {
	mmu.mutation.AddMailGb(i)
	return mmu
}

// SetMailRecvGroup sets the "mailRecvGroup" field.
func (mmu *MessageMailUpdate) SetMailRecvGroup(s string) *MessageMailUpdate {
	mmu.mutation.SetMailRecvGroup(s)
	return mmu
}

// SetNillableMailRecvGroup sets the "mailRecvGroup" field if the given value is not nil.
func (mmu *MessageMailUpdate) SetNillableMailRecvGroup(s *string) *MessageMailUpdate {
	if s != nil {
		mmu.SetMailRecvGroup(*s)
	}
	return mmu
}

// SetSent sets the "sent" field.
func (mmu *MessageMailUpdate) SetSent(i int) *MessageMailUpdate {
	mmu.mutation.ResetSent()
	mmu.mutation.SetSent(i)
	return mmu
}

// SetNillableSent sets the "sent" field if the given value is not nil.
func (mmu *MessageMailUpdate) SetNillableSent(i *int) *MessageMailUpdate {
	if i != nil {
		mmu.SetSent(*i)
	}
	return mmu
}

// AddSent adds i to the "sent" field.
func (mmu *MessageMailUpdate) AddSent(i int) *MessageMailUpdate {
	mmu.mutation.AddSent(i)
	return mmu
}

// SetSentAt sets the "sentAt" field.
func (mmu *MessageMailUpdate) SetSentAt(t time.Time) *MessageMailUpdate {
	mmu.mutation.SetSentAt(t)
	return mmu
}

// SetCreatedById sets the "createdById" field.
func (mmu *MessageMailUpdate) SetCreatedById(i int) *MessageMailUpdate {
	mmu.mutation.ResetCreatedById()
	mmu.mutation.SetCreatedById(i)
	return mmu
}

// SetNillableCreatedById sets the "createdById" field if the given value is not nil.
func (mmu *MessageMailUpdate) SetNillableCreatedById(i *int) *MessageMailUpdate {
	if i != nil {
		mmu.SetCreatedById(*i)
	}
	return mmu
}

// AddCreatedById adds i to the "createdById" field.
func (mmu *MessageMailUpdate) AddCreatedById(i int) *MessageMailUpdate {
	mmu.mutation.AddCreatedById(i)
	return mmu
}

// SetUpdatedById sets the "updatedById" field.
func (mmu *MessageMailUpdate) SetUpdatedById(i int) *MessageMailUpdate {
	mmu.mutation.ResetUpdatedById()
	mmu.mutation.SetUpdatedById(i)
	return mmu
}

// SetNillableUpdatedById sets the "updatedById" field if the given value is not nil.
func (mmu *MessageMailUpdate) SetNillableUpdatedById(i *int) *MessageMailUpdate {
	if i != nil {
		mmu.SetUpdatedById(*i)
	}
	return mmu
}

// AddUpdatedById adds i to the "updatedById" field.
func (mmu *MessageMailUpdate) AddUpdatedById(i int) *MessageMailUpdate {
	mmu.mutation.AddUpdatedById(i)
	return mmu
}

// SetUpdatedAt sets the "updatedAt" field.
func (mmu *MessageMailUpdate) SetUpdatedAt(t time.Time) *MessageMailUpdate {
	mmu.mutation.SetUpdatedAt(t)
	return mmu
}

// Mutation returns the MessageMailMutation object of the builder.
func (mmu *MessageMailUpdate) Mutation() *MessageMailMutation {
	return mmu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mmu *MessageMailUpdate) Save(ctx context.Context) (int, error) {
	mmu.defaults()
	return withHooks(ctx, mmu.sqlSave, mmu.mutation, mmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mmu *MessageMailUpdate) SaveX(ctx context.Context) int {
	affected, err := mmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mmu *MessageMailUpdate) Exec(ctx context.Context) error {
	_, err := mmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mmu *MessageMailUpdate) ExecX(ctx context.Context) {
	if err := mmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mmu *MessageMailUpdate) defaults() {
	if _, ok := mmu.mutation.SentAt(); !ok {
		v := messagemail.UpdateDefaultSentAt()
		mmu.mutation.SetSentAt(v)
	}
	if _, ok := mmu.mutation.UpdatedAt(); !ok {
		v := messagemail.UpdateDefaultUpdatedAt()
		mmu.mutation.SetUpdatedAt(v)
	}
}

func (mmu *MessageMailUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(messagemail.Table, messagemail.Columns, sqlgraph.NewFieldSpec(messagemail.FieldID, field.TypeInt))
	if ps := mmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mmu.mutation.MailSubject(); ok {
		_spec.SetField(messagemail.FieldMailSubject, field.TypeString, value)
	}
	if value, ok := mmu.mutation.MailContents(); ok {
		_spec.SetField(messagemail.FieldMailContents, field.TypeString, value)
	}
	if value, ok := mmu.mutation.MailGb(); ok {
		_spec.SetField(messagemail.FieldMailGb, field.TypeInt, value)
	}
	if value, ok := mmu.mutation.AddedMailGb(); ok {
		_spec.AddField(messagemail.FieldMailGb, field.TypeInt, value)
	}
	if value, ok := mmu.mutation.MailRecvGroup(); ok {
		_spec.SetField(messagemail.FieldMailRecvGroup, field.TypeString, value)
	}
	if value, ok := mmu.mutation.Sent(); ok {
		_spec.SetField(messagemail.FieldSent, field.TypeInt, value)
	}
	if value, ok := mmu.mutation.AddedSent(); ok {
		_spec.AddField(messagemail.FieldSent, field.TypeInt, value)
	}
	if value, ok := mmu.mutation.SentAt(); ok {
		_spec.SetField(messagemail.FieldSentAt, field.TypeTime, value)
	}
	if value, ok := mmu.mutation.CreatedById(); ok {
		_spec.SetField(messagemail.FieldCreatedById, field.TypeInt, value)
	}
	if value, ok := mmu.mutation.AddedCreatedById(); ok {
		_spec.AddField(messagemail.FieldCreatedById, field.TypeInt, value)
	}
	if value, ok := mmu.mutation.UpdatedById(); ok {
		_spec.SetField(messagemail.FieldUpdatedById, field.TypeInt, value)
	}
	if value, ok := mmu.mutation.AddedUpdatedById(); ok {
		_spec.AddField(messagemail.FieldUpdatedById, field.TypeInt, value)
	}
	if value, ok := mmu.mutation.UpdatedAt(); ok {
		_spec.SetField(messagemail.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{messagemail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mmu.mutation.done = true
	return n, nil
}

// MessageMailUpdateOne is the builder for updating a single MessageMail entity.
type MessageMailUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MessageMailMutation
}

// SetMailSubject sets the "mailSubject" field.
func (mmuo *MessageMailUpdateOne) SetMailSubject(s string) *MessageMailUpdateOne {
	mmuo.mutation.SetMailSubject(s)
	return mmuo
}

// SetNillableMailSubject sets the "mailSubject" field if the given value is not nil.
func (mmuo *MessageMailUpdateOne) SetNillableMailSubject(s *string) *MessageMailUpdateOne {
	if s != nil {
		mmuo.SetMailSubject(*s)
	}
	return mmuo
}

// SetMailContents sets the "mailContents" field.
func (mmuo *MessageMailUpdateOne) SetMailContents(s string) *MessageMailUpdateOne {
	mmuo.mutation.SetMailContents(s)
	return mmuo
}

// SetNillableMailContents sets the "mailContents" field if the given value is not nil.
func (mmuo *MessageMailUpdateOne) SetNillableMailContents(s *string) *MessageMailUpdateOne {
	if s != nil {
		mmuo.SetMailContents(*s)
	}
	return mmuo
}

// SetMailGb sets the "mailGb" field.
func (mmuo *MessageMailUpdateOne) SetMailGb(i int) *MessageMailUpdateOne {
	mmuo.mutation.ResetMailGb()
	mmuo.mutation.SetMailGb(i)
	return mmuo
}

// SetNillableMailGb sets the "mailGb" field if the given value is not nil.
func (mmuo *MessageMailUpdateOne) SetNillableMailGb(i *int) *MessageMailUpdateOne {
	if i != nil {
		mmuo.SetMailGb(*i)
	}
	return mmuo
}

// AddMailGb adds i to the "mailGb" field.
func (mmuo *MessageMailUpdateOne) AddMailGb(i int) *MessageMailUpdateOne {
	mmuo.mutation.AddMailGb(i)
	return mmuo
}

// SetMailRecvGroup sets the "mailRecvGroup" field.
func (mmuo *MessageMailUpdateOne) SetMailRecvGroup(s string) *MessageMailUpdateOne {
	mmuo.mutation.SetMailRecvGroup(s)
	return mmuo
}

// SetNillableMailRecvGroup sets the "mailRecvGroup" field if the given value is not nil.
func (mmuo *MessageMailUpdateOne) SetNillableMailRecvGroup(s *string) *MessageMailUpdateOne {
	if s != nil {
		mmuo.SetMailRecvGroup(*s)
	}
	return mmuo
}

// SetSent sets the "sent" field.
func (mmuo *MessageMailUpdateOne) SetSent(i int) *MessageMailUpdateOne {
	mmuo.mutation.ResetSent()
	mmuo.mutation.SetSent(i)
	return mmuo
}

// SetNillableSent sets the "sent" field if the given value is not nil.
func (mmuo *MessageMailUpdateOne) SetNillableSent(i *int) *MessageMailUpdateOne {
	if i != nil {
		mmuo.SetSent(*i)
	}
	return mmuo
}

// AddSent adds i to the "sent" field.
func (mmuo *MessageMailUpdateOne) AddSent(i int) *MessageMailUpdateOne {
	mmuo.mutation.AddSent(i)
	return mmuo
}

// SetSentAt sets the "sentAt" field.
func (mmuo *MessageMailUpdateOne) SetSentAt(t time.Time) *MessageMailUpdateOne {
	mmuo.mutation.SetSentAt(t)
	return mmuo
}

// SetCreatedById sets the "createdById" field.
func (mmuo *MessageMailUpdateOne) SetCreatedById(i int) *MessageMailUpdateOne {
	mmuo.mutation.ResetCreatedById()
	mmuo.mutation.SetCreatedById(i)
	return mmuo
}

// SetNillableCreatedById sets the "createdById" field if the given value is not nil.
func (mmuo *MessageMailUpdateOne) SetNillableCreatedById(i *int) *MessageMailUpdateOne {
	if i != nil {
		mmuo.SetCreatedById(*i)
	}
	return mmuo
}

// AddCreatedById adds i to the "createdById" field.
func (mmuo *MessageMailUpdateOne) AddCreatedById(i int) *MessageMailUpdateOne {
	mmuo.mutation.AddCreatedById(i)
	return mmuo
}

// SetUpdatedById sets the "updatedById" field.
func (mmuo *MessageMailUpdateOne) SetUpdatedById(i int) *MessageMailUpdateOne {
	mmuo.mutation.ResetUpdatedById()
	mmuo.mutation.SetUpdatedById(i)
	return mmuo
}

// SetNillableUpdatedById sets the "updatedById" field if the given value is not nil.
func (mmuo *MessageMailUpdateOne) SetNillableUpdatedById(i *int) *MessageMailUpdateOne {
	if i != nil {
		mmuo.SetUpdatedById(*i)
	}
	return mmuo
}

// AddUpdatedById adds i to the "updatedById" field.
func (mmuo *MessageMailUpdateOne) AddUpdatedById(i int) *MessageMailUpdateOne {
	mmuo.mutation.AddUpdatedById(i)
	return mmuo
}

// SetUpdatedAt sets the "updatedAt" field.
func (mmuo *MessageMailUpdateOne) SetUpdatedAt(t time.Time) *MessageMailUpdateOne {
	mmuo.mutation.SetUpdatedAt(t)
	return mmuo
}

// Mutation returns the MessageMailMutation object of the builder.
func (mmuo *MessageMailUpdateOne) Mutation() *MessageMailMutation {
	return mmuo.mutation
}

// Where appends a list predicates to the MessageMailUpdate builder.
func (mmuo *MessageMailUpdateOne) Where(ps ...predicate.MessageMail) *MessageMailUpdateOne {
	mmuo.mutation.Where(ps...)
	return mmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mmuo *MessageMailUpdateOne) Select(field string, fields ...string) *MessageMailUpdateOne {
	mmuo.fields = append([]string{field}, fields...)
	return mmuo
}

// Save executes the query and returns the updated MessageMail entity.
func (mmuo *MessageMailUpdateOne) Save(ctx context.Context) (*MessageMail, error) {
	mmuo.defaults()
	return withHooks(ctx, mmuo.sqlSave, mmuo.mutation, mmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mmuo *MessageMailUpdateOne) SaveX(ctx context.Context) *MessageMail {
	node, err := mmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mmuo *MessageMailUpdateOne) Exec(ctx context.Context) error {
	_, err := mmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mmuo *MessageMailUpdateOne) ExecX(ctx context.Context) {
	if err := mmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mmuo *MessageMailUpdateOne) defaults() {
	if _, ok := mmuo.mutation.SentAt(); !ok {
		v := messagemail.UpdateDefaultSentAt()
		mmuo.mutation.SetSentAt(v)
	}
	if _, ok := mmuo.mutation.UpdatedAt(); !ok {
		v := messagemail.UpdateDefaultUpdatedAt()
		mmuo.mutation.SetUpdatedAt(v)
	}
}

func (mmuo *MessageMailUpdateOne) sqlSave(ctx context.Context) (_node *MessageMail, err error) {
	_spec := sqlgraph.NewUpdateSpec(messagemail.Table, messagemail.Columns, sqlgraph.NewFieldSpec(messagemail.FieldID, field.TypeInt))
	id, ok := mmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MessageMail.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, messagemail.FieldID)
		for _, f := range fields {
			if !messagemail.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != messagemail.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mmuo.mutation.MailSubject(); ok {
		_spec.SetField(messagemail.FieldMailSubject, field.TypeString, value)
	}
	if value, ok := mmuo.mutation.MailContents(); ok {
		_spec.SetField(messagemail.FieldMailContents, field.TypeString, value)
	}
	if value, ok := mmuo.mutation.MailGb(); ok {
		_spec.SetField(messagemail.FieldMailGb, field.TypeInt, value)
	}
	if value, ok := mmuo.mutation.AddedMailGb(); ok {
		_spec.AddField(messagemail.FieldMailGb, field.TypeInt, value)
	}
	if value, ok := mmuo.mutation.MailRecvGroup(); ok {
		_spec.SetField(messagemail.FieldMailRecvGroup, field.TypeString, value)
	}
	if value, ok := mmuo.mutation.Sent(); ok {
		_spec.SetField(messagemail.FieldSent, field.TypeInt, value)
	}
	if value, ok := mmuo.mutation.AddedSent(); ok {
		_spec.AddField(messagemail.FieldSent, field.TypeInt, value)
	}
	if value, ok := mmuo.mutation.SentAt(); ok {
		_spec.SetField(messagemail.FieldSentAt, field.TypeTime, value)
	}
	if value, ok := mmuo.mutation.CreatedById(); ok {
		_spec.SetField(messagemail.FieldCreatedById, field.TypeInt, value)
	}
	if value, ok := mmuo.mutation.AddedCreatedById(); ok {
		_spec.AddField(messagemail.FieldCreatedById, field.TypeInt, value)
	}
	if value, ok := mmuo.mutation.UpdatedById(); ok {
		_spec.SetField(messagemail.FieldUpdatedById, field.TypeInt, value)
	}
	if value, ok := mmuo.mutation.AddedUpdatedById(); ok {
		_spec.AddField(messagemail.FieldUpdatedById, field.TypeInt, value)
	}
	if value, ok := mmuo.mutation.UpdatedAt(); ok {
		_spec.SetField(messagemail.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &MessageMail{config: mmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{messagemail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mmuo.mutation.done = true
	return _node, nil
}
